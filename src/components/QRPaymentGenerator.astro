---
// Le QR code sera g√©n√©r√© c√¥t√© client avec JavaScript
---

<div class="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
  <!-- Header avec animation -->
  <div class="text-center mb-8 lg:mb-12 animate-fade-in">
    <div class="inline-block p-3 sm:p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 mb-4 sm:mb-6 float-animation">
      <svg class="w-8 h-8 sm:w-12 sm:h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
      </svg>
    </div>
    <h1 class="text-3xl sm:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-purple-400 via-pink-400 to-indigo-400 bg-clip-text text-transparent mb-3 sm:mb-4">
      G√©n√©rateur QR Code
    </h1>
    <p class="text-lg sm:text-xl text-gray-300 max-w-2xl mx-auto px-4">
      Cr√©ez des QR codes √©l√©gants pour vos paiements bancaires instantan√©s
    </p>
  </div>

  <div class="grid xl:grid-cols-2 gap-6 lg:gap-12">
    <!-- Formulaire de saisie -->
    <div class="space-y-6 lg:space-y-8 animate-slide-in-left order-1">
      <div class="bg-gradient-to-br from-gray-800/80 to-gray-900/80 backdrop-blur-xl p-6 lg:p-8 rounded-3xl border border-gray-700/50 shadow-2xl glow-animation">
        <h2 class="text-2xl lg:text-3xl font-bold text-white mb-6 flex items-center">
          <div class="w-6 h-6 lg:w-8 lg:h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg mr-3 flex items-center justify-center">
            <svg class="w-4 h-4 lg:w-5 lg:h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
            </svg>
          </div>
          <span class="text-lg lg:text-2xl">Informations de paiement</span>
        </h2>
        
        <form id="payment-form" class="space-y-6">
          <!-- IBAN -->
          <div class="group">
            <label for="iban" class="block text-sm font-semibold text-gray-300 mb-3">
              IBAN belge du destinataire *
            </label>
            <div class="relative">
              <input
                type="text"
                id="iban"
                name="iban"
                placeholder="BE68 5390 0754 7034"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400"
                required
                maxlength="19"
                title="Veuillez entrer un IBAN belge valide (format: BE68 5390 0754 7034)"
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
                </svg>
              </div>
            </div>
            <p class="text-xs text-gray-400 mt-1">Format: BE68 5390 0754 7034</p>
          </div>

          <!-- Montant -->
          <div class="group">
            <label for="amount" class="block text-sm font-semibold text-gray-300 mb-3">
              Montant (‚Ç¨) *
            </label>
            <div class="relative">
              <input
                type="number"
                id="amount"
                name="amount"
                placeholder="0.00"
                step="0.01"
                min="0.01"
                max="999999.99"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400 no-arrows"
                required
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <span class="text-purple-400 font-semibold">‚Ç¨</span>
              </div>
            </div>
            <p class="text-xs text-gray-400 mt-1">Montant minimum: 0.01‚Ç¨</p>
          </div>

          <!-- Communication -->
          <div class="group">
            <label for="communication" class="block text-sm font-semibold text-gray-300 mb-3">
              Communication / R√©f√©rence *
            </label>
            <textarea
              id="communication"
              name="communication"
              placeholder="Description du paiement (obligatoire)"
              rows="3"
              class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 resize-none group-hover:border-purple-400"
              required
              minlength="3"
              maxlength="140"
            ></textarea>
            <p class="text-xs text-gray-400 mt-1">Entre 3 et 140 caract√®res</p>
          </div>

          <!-- Nom du b√©n√©ficiaire -->
          <div class="group">
            <label for="beneficiary" class="block text-sm font-semibold text-gray-300 mb-3">
              Nom du b√©n√©ficiaire
            </label>
            <div class="relative">
              <input
                type="text"
                id="beneficiary"
                name="beneficiary"
                placeholder="Nom du destinataire"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400"
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              </div>
            </div>
          </div>

          <button
            type="submit"
            class="w-full bg-gradient-to-r from-purple-600 via-pink-600 to-indigo-600 text-white py-3 sm:py-4 px-6 sm:px-8 rounded-xl font-bold text-base sm:text-lg hover:from-purple-700 hover:via-pink-700 hover:to-indigo-700 transform hover:scale-105 transition-all duration-300 shadow-2xl hover:shadow-purple-500/25 relative overflow-hidden group"
          >
            <span class="relative z-10 flex items-center justify-center gap-2">
              <span>G√©n√©rer le QR Code</span>
              <span>‚ú®</span>
            </span>
            <div class="absolute inset-0 bg-gradient-to-r from-purple-600 to-pink-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          </button>

          <!-- Boutons d'actions -->
          <div class="flex flex-col sm:flex-row gap-3 sm:gap-4 mt-6">
            <button
              type="button"
              id="reset-btn"
              class="flex-1 bg-gradient-to-r from-gray-600 to-gray-700 text-white py-3 px-4 rounded-xl font-semibold hover:from-gray-700 hover:to-gray-800 transition-all duration-300 transform hover:scale-105 text-sm sm:text-base"
            >
              <span class="flex items-center justify-center gap-2">
                <span>üîÑ</span>
                <span>Reset</span>
              </span>
            </button>
            
            <button
              type="button"
              id="save-defaults-btn"
              class="flex-1 bg-gradient-to-r from-emerald-600 to-teal-600 text-white py-3 px-4 rounded-xl font-semibold hover:from-emerald-700 hover:to-teal-700 transition-all duration-300 transform hover:scale-105 text-sm sm:text-base"
            >
              <span class="flex items-center justify-center gap-2">
                <span>üíæ</span>
                <span>Sauvegarder</span>
              </span>
            </button>
          </div>

          <!-- Indicateur de sauvegarde -->
          <div id="save-indicator" class="hidden mt-3 p-3 bg-green-900/50 border border-green-500/30 rounded-lg text-green-300 text-sm text-center">
            ‚úÖ Valeurs par d√©faut sauvegard√©es !
          </div>

          <!-- Section personnalisation couleurs -->
          <div class="mt-8 p-4 sm:p-6 bg-gradient-to-r from-indigo-900/30 to-purple-900/30 rounded-xl border border-indigo-500/30">
            <h3 class="text-lg sm:text-xl font-bold text-white mb-4 flex items-center flex-wrap gap-2">
              <svg class="w-5 h-5 text-indigo-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a4 4 0 004-4V5z"></path>
              </svg>
              <span>üé® Personnalisation du QR Code</span>
              <span class="text-xs bg-gradient-to-r from-green-500 to-emerald-500 text-white px-2 py-1 rounded-full animate-pulse">
                ‚ö° Temps r√©el
              </span>
            </h3>
            
            <div class="space-y-4 sm:space-y-0 sm:grid sm:grid-cols-2 sm:gap-4">
              <!-- Couleur du QR Code -->
              <div class="group">
                <label for="qr-color" class="block text-sm font-semibold text-gray-300 mb-3">
                  Couleur du QR Code
                </label>
                <div class="flex items-center gap-3">
                  <input
                    type="color"
                    id="qr-color"
                    name="qr-color"
                    value="#000000"
                    class="w-12 h-12 rounded-lg border-2 border-gray-600 cursor-pointer hover:border-purple-400 transition-colors flex-shrink-0"
                  />
                  <span id="qr-color-value" class="text-gray-300 font-mono text-sm">#000000</span>
                </div>
              </div>

              <!-- Couleur du fond -->
              <div class="group">
                <label for="bg-color" class="block text-sm font-semibold text-gray-300 mb-3">
                  Couleur du fond
                </label>
                <div class="flex items-center gap-3">
                  <input
                    type="color"
                    id="bg-color"
                    name="bg-color"
                    value="#FFFFFF"
                    class="w-12 h-12 rounded-lg border-2 border-gray-600 cursor-pointer hover:border-purple-400 transition-colors flex-shrink-0"
                  />
                  <span id="bg-color-value" class="text-gray-300 font-mono text-sm">#FFFFFF</span>
                </div>
              </div>
            </div>

            <!-- Option fond transparent -->
            <div class="mt-6">
              <label class="flex items-start sm:items-center cursor-pointer group">
                <input
                  type="checkbox"
                  id="transparent-bg"
                  name="transparent-bg"
                  class="sr-only"
                />
                <div class="relative flex-shrink-0">
                  <div class="w-6 h-6 bg-gray-600 rounded border-2 border-gray-500 group-hover:border-purple-400 transition-colors"></div>
                  <div class="absolute inset-0 w-6 h-6 bg-gradient-to-r from-purple-500 to-pink-500 rounded opacity-0 transition-opacity duration-200" id="checkbox-bg"></div>
                  <svg class="absolute inset-0 w-6 h-6 text-white opacity-0 transition-opacity duration-200" id="checkbox-check" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <span class="ml-3 text-gray-300 font-medium group-hover:text-white transition-colors text-sm sm:text-base">
                  üîç Fond transparent (pour affiches)
                </span>
              </label>
            </div>

            <!-- Aper√ßu des couleurs -->
            <div class="mt-6 p-4 bg-gray-800/50 rounded-lg">
              <p class="text-xs text-gray-400 mb-3">Aper√ßu des couleurs :</p>
              <div class="flex items-center gap-4 flex-wrap">
                <div id="color-preview" class="w-16 h-16 rounded-lg border-2 border-gray-600 flex items-center justify-center text-xs font-bold flex-shrink-0" style="background-color: #FFFFFF; color: #000000;">
                  QR
                </div>
                <div class="text-xs text-gray-400 space-y-1">
                  <div>QR: <span id="preview-qr-color">#000000</span></div>
                  <div>Fond: <span id="preview-bg-color">#FFFFFF</span></div>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- Zone d'affichage du QR Code -->
    <div class="space-y-6 lg:space-y-8 animate-slide-in-right order-2 xl:order-2">
      <div class="bg-gradient-to-br from-gray-800/80 to-gray-900/80 backdrop-blur-xl p-6 lg:p-8 rounded-3xl border border-gray-700/50 shadow-2xl min-h-[400px] lg:min-h-[500px] flex flex-col items-center justify-center">
        <div id="qr-container" class="hidden text-center space-y-4 lg:space-y-6 animate-fade-in w-full">
          <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-4 sm:p-6 lg:p-8 border border-white/20">
            <h3 class="text-xl sm:text-2xl font-bold text-white mb-4 lg:mb-6 flex items-center justify-center gap-2 flex-wrap">
              <span class="text-xl sm:text-2xl">üì±</span>
              <span>Votre QR Code de Paiement</span>
              <span class="text-xs bg-purple-500/30 text-purple-200 px-2 py-1 rounded-full border border-purple-400/30">
                ‚ö° Temps r√©el
              </span>
            </h3>
            <div class="bg-white p-3 sm:p-4 rounded-xl mx-auto inline-block">
              <img id="qr-image" alt="QR Code de paiement" class="mx-auto rounded-lg shadow-2xl max-w-full h-auto" />
            </div>
            <p class="text-purple-200 mt-3 sm:mt-4 text-sm">
              Scannez ce code avec votre application bancaire
            </p>
          </div>

          <!-- D√©tails du paiement -->
          <div id="payment-details" class="p-4 sm:p-6 bg-gradient-to-r from-blue-900/50 to-purple-900/50 rounded-2xl border border-blue-500/30 animate-slide-up">
            <h4 class="font-bold text-white mb-4 flex items-center text-sm sm:text-base">
              <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2 text-blue-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              D√©tails du paiement
            </h4>
            <div class="text-xs sm:text-sm text-gray-300 space-y-2">
              <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-0">
                <strong class="text-blue-400">IBAN :</strong> 
                <span id="display-iban" class="font-mono break-all sm:break-normal"></span>
              </div>
              <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-0">
                <strong class="text-green-400">Montant :</strong>
                <div class="flex items-center gap-1">
                  <span id="display-amount"></span> ‚Ç¨
                </div>
              </div>
              <div id="display-communication-container" class="hidden">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-2">
                  <strong class="text-purple-400 flex-shrink-0">Communication :</strong> 
                  <span id="display-communication" class="break-words"></span>
                </div>
              </div>
              <div id="display-beneficiary-container" class="hidden">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-0">
                  <strong class="text-pink-400">B√©n√©ficiaire :</strong> 
                  <span id="display-beneficiary" class="break-words"></span>
                </div>
              </div>
            </div>
          </div>

          <!-- Bouton de t√©l√©chargement -->
          <button
            id="download-btn"
            class="w-full bg-gradient-to-r from-green-600 to-emerald-600 text-white py-3 px-4 sm:px-6 rounded-xl font-semibold hover:from-green-700 hover:to-emerald-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-green-500/25 text-sm sm:text-base"
          >
            <span class="flex items-center justify-center gap-2">
              <span>üì•</span>
              <span>T√©l√©charger le QR Code</span>
            </span>
          </button>
        </div>

        <div id="placeholder" class="text-center animate-pulse">
          <div class="w-24 h-24 sm:w-32 sm:h-32 bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-full mx-auto mb-4 sm:mb-6 flex items-center justify-center float-animation">
            <svg class="w-12 h-12 sm:w-16 sm:h-16 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
            </svg>
          </div>
          <h3 class="text-xl sm:text-2xl font-semibold text-gray-400 mb-3">
            ‚ú® QR Code de Paiement
          </h3>
          <p class="text-gray-500 max-w-sm mx-auto text-sm sm:text-base px-4">
            Remplissez le formulaire pour g√©n√©rer votre QR code √©l√©gant
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Fonction d'animation personnalis√©e (remplace animatejs)
  function animateElement(element: Element | string, keyframes: any, options: any = {}) {
    const el = typeof element === 'string' ? document.querySelector(element) : element;
    if (!el) return;
    
    const animation = (el as Element).animate(keyframes, {
      duration: options.duration || 300,
      easing: options.easing || 'ease',
      delay: options.delay || 0,
      fill: 'forwards'
    });
    
    if (options.complete) {
      animation.addEventListener('finish', options.complete);
    }
    
    return animation;
  }

  // Script inline pour QR Code generation (sans d√©pendance externe)
  function generateQRCode(text: string, size: number = 300): string {
    // Utilisation de l'API QR Server (service gratuit)
    const encodedText = encodeURIComponent(text);
    return `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodedText}&format=png&margin=10`;
  }

  // Attendre que le DOM soit charg√©
  document.addEventListener('DOMContentLoaded', () => {
    // Animations d'entr√©e
    setTimeout(() => {
      animateElement('.animate-fade-in', [
        { opacity: 0, transform: 'translateY(30px)' },
        { opacity: 1, transform: 'translateY(0px)' }
      ], {
        duration: 800,
        easing: 'ease-out'
      });
    }, 100);

    setTimeout(() => {
      animateElement('.animate-slide-in-left', [
        { opacity: 0, transform: 'translateX(-50px)' },
        { opacity: 1, transform: 'translateX(0px)' }
      ], {
        duration: 1000,
        easing: 'ease-out'
      });
    }, 300);

    setTimeout(() => {
      animateElement('.animate-slide-in-right', [
        { opacity: 0, transform: 'translateX(50px)' },
        { opacity: 1, transform: 'translateX(0px)' }
      ], {
        duration: 1000,
        easing: 'ease-out'
      });
    }, 500);

    const form = document.getElementById('payment-form') as HTMLFormElement;
    const qrContainer = document.getElementById('qr-container') as HTMLElement;
    const placeholder = document.getElementById('placeholder') as HTMLElement;
    const qrImage = document.getElementById('qr-image') as HTMLImageElement;
    const downloadBtn = document.getElementById('download-btn') as HTMLButtonElement;
    const resetBtn = document.getElementById('reset-btn') as HTMLButtonElement;
    const saveDefaultsBtn = document.getElementById('save-defaults-btn') as HTMLButtonElement;
    const saveIndicator = document.getElementById('save-indicator') as HTMLElement;

    // √âl√©ments d'affichage des d√©tails
    const displayIban = document.getElementById('display-iban') as HTMLElement;
    const displayAmount = document.getElementById('display-amount') as HTMLElement;
    const displayCommunication = document.getElementById('display-communication') as HTMLElement;
    const displayCommunicationContainer = document.getElementById('display-communication-container') as HTMLElement;
    const displayBeneficiary = document.getElementById('display-beneficiary') as HTMLElement;
    const displayBeneficiaryContainer = document.getElementById('display-beneficiary-container') as HTMLElement;

    // √âl√©ments du formulaire
    const amountInput = document.getElementById('amount') as HTMLInputElement;
    const communicationInput = document.getElementById('communication') as HTMLTextAreaElement;
    const beneficiaryInput = document.getElementById('beneficiary') as HTMLInputElement;
    
    // √âl√©ments de personnalisation des couleurs
    const qrColorInput = document.getElementById('qr-color') as HTMLInputElement;
    const bgColorInput = document.getElementById('bg-color') as HTMLInputElement;
    const transparentBgInput = document.getElementById('transparent-bg') as HTMLInputElement;
    const qrColorValue = document.getElementById('qr-color-value') as HTMLElement;
    const bgColorValue = document.getElementById('bg-color-value') as HTMLElement;
    const colorPreview = document.getElementById('color-preview') as HTMLElement;
    const previewQrColor = document.getElementById('preview-qr-color') as HTMLElement;
    const previewBgColor = document.getElementById('preview-bg-color') as HTMLElement;
    const checkboxBg = document.getElementById('checkbox-bg') as HTMLElement;
    const checkboxCheck = document.getElementById('checkbox-check') as HTMLElement;

    if (!form) {
      console.error('Formulaire non trouv√©');
      return;
    }

    // Charger les valeurs par d√©faut au d√©marrage
    loadDefaults();
    setupColorHandlers();

    // Fonction pour charger les valeurs par d√©faut
    function loadDefaults() {
      try {
        const savedDefaults = localStorage.getItem('qr-payment-defaults');
        if (savedDefaults) {
          const defaults = JSON.parse(savedDefaults);
          console.log('Chargement des valeurs par d√©faut:', defaults);
          
          if (defaults.amount && amountInput) {
            amountInput.value = defaults.amount;
          }
          if (defaults.communication && communicationInput) {
            communicationInput.value = defaults.communication;
          }
          if (defaults.beneficiary && beneficiaryInput) {
            beneficiaryInput.value = defaults.beneficiary;
          }
        }
      } catch (error) {
        console.error('Erreur lors du chargement des valeurs par d√©faut:', error);
      }
    }

    // Fonction pour sauvegarder les valeurs par d√©faut
    function saveDefaults() {
      try {
        const defaults = {
          amount: amountInput?.value || '',
          communication: communicationInput?.value || '',
          beneficiary: beneficiaryInput?.value || ''
        };
        
        localStorage.setItem('qr-payment-defaults', JSON.stringify(defaults));
        console.log('Valeurs par d√©faut sauvegard√©es:', defaults);
        
        // Afficher l'indicateur de sauvegarde
        saveIndicator.classList.remove('hidden');
        animateElement(saveIndicator, [
          { opacity: 0, transform: 'translateY(-10px)' },
          { opacity: 1, transform: 'translateY(0px)' }
        ], {
          duration: 300
        });
        
        // Masquer l'indicateur apr√®s 3 secondes
        setTimeout(() => {
          animateElement(saveIndicator, [
            { opacity: 1, transform: 'translateY(0px)' },
            { opacity: 0, transform: 'translateY(-10px)' }
          ], {
            duration: 300,
            complete: () => {
              saveIndicator.classList.add('hidden');
            }
          });
        }, 3000);
        
      } catch (error) {
        console.error('Erreur lors de la sauvegarde:', error);
        alert('Erreur lors de la sauvegarde des valeurs par d√©faut');
      }
    }

    // Fonction pour reset le formulaire
    function resetForm() {
      form.reset();
      
      // Masquer le QR code et afficher le placeholder
      qrContainer.classList.add('hidden');
      placeholder.classList.remove('hidden');
      
      // Animation de reset
      animateElement(form, [
        { transform: 'scale(1)' },
        { transform: 'scale(0.98)' },
        { transform: 'scale(1)' }
      ], {
        duration: 300
      });
      
      console.log('Formulaire r√©initialis√©');
    }

    // Fonction pour configurer les gestionnaires de couleurs
    function setupColorHandlers() {
      // Gestionnaire pour la couleur du QR code
      qrColorInput?.addEventListener('input', (e) => {
        const color = (e.target as HTMLInputElement).value;
        qrColorValue.textContent = color;
        previewQrColor.textContent = color;
        updateColorPreview();
        updateQRCodeColors(); // R√©g√©n√©ration avec nouvelles couleurs
      });

      // Gestionnaire pour la couleur du fond
      bgColorInput?.addEventListener('input', (e) => {
        const color = (e.target as HTMLInputElement).value;
        bgColorValue.textContent = color;
        previewBgColor.textContent = color;
        updateColorPreview();
        updateQRCodeColors(); // R√©g√©n√©ration avec nouvelles couleurs
      });

      // Gestionnaire pour le fond transparent
      transparentBgInput?.addEventListener('change', (e) => {
        const isChecked = (e.target as HTMLInputElement).checked;
        
        if (isChecked) {
          checkboxBg.style.opacity = '1';
          checkboxCheck.style.opacity = '1';
          bgColorInput.disabled = true;
          bgColorInput.style.opacity = '0.5';
        } else {
          checkboxBg.style.opacity = '0';
          checkboxCheck.style.opacity = '0';
          bgColorInput.disabled = false;
          bgColorInput.style.opacity = '1';
        }
        
        updateColorPreview();
        updateQRCodeColors(); // R√©g√©n√©ration avec nouvelles couleurs
      });
    }

    // Fonction pour mettre √† jour le QR code affich√© en temps r√©el
    async function updateQRCodeColors() {
      // V√©rifier si un QR code est actuellement affich√©
      if (!qrContainer.classList.contains('hidden') && qrImage.src) {
        // R√©cup√©rer les donn√©es du QR code depuis le formulaire
        const formData = new FormData(form);
        const iban = formData.get('iban') as string;
        const amount = formData.get('amount') as string;
        const communication = formData.get('communication') as string;
        const beneficiary = formData.get('beneficiary') as string;
        
        if (iban && amount && communication) {
          const ibanClean = iban.replace(/\s/g, '');
          const qrData = `BCD
002
1
SCT

${beneficiary || ''}
${ibanClean}
EUR${amount}


${communication || ''}`;

          // G√©n√©rer le nouveau QR code avec les couleurs mises √† jour
          const newQrCodeUrl = await generateQRCodeWithColors(qrData, 300);
          
          // Mettre √† jour l'image avec une animation fluide
          qrImage.style.opacity = '0.7';
          qrImage.style.transition = 'opacity 0.3s ease';
          
          setTimeout(() => {
            qrImage.src = newQrCodeUrl;
            qrImage.onload = () => {
              qrImage.style.opacity = '1';
              // Mettre √† jour l'affichage avec le motif damier si n√©cessaire
              updateQRCodeDisplay();
            };
          }, 150);
          
          console.log('QR Code mis √† jour avec nouvelles couleurs');
        }
      }
    }

    // Fonction pour mettre √† jour l'aper√ßu des couleurs
    function updateColorPreview() {
      const qrColor = qrColorInput?.value || '#000000';
      const bgColor = transparentBgInput?.checked ? 'transparent' : (bgColorInput?.value || '#FFFFFF');
      
      if (colorPreview) {
        colorPreview.style.backgroundColor = bgColor === 'transparent' ? 'rgba(0,0,0,0)' : bgColor;
        colorPreview.style.color = qrColor;
        
        if (bgColor === 'transparent') {
          // Motif damier pour fond transparent
          colorPreview.style.backgroundImage = 'linear-gradient(45deg, #ccc 25%, transparent 25%), linear-gradient(-45deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%), linear-gradient(-45deg, transparent 75%, #ccc 75%)';
          colorPreview.style.backgroundSize = '8px 8px';
          colorPreview.style.backgroundPosition = '0 0, 0 4px, 4px -4px, -4px 0px';
          previewBgColor.textContent = 'Transparent';
        } else {
          colorPreview.style.backgroundImage = 'none';
          previewBgColor.textContent = bgColor;
        }
      }
      
      // Mettre √† jour l'affichage du QR code si il est visible
      updateQRCodeDisplay();
    }

    // Nouvelle fonction pour mettre √† jour l'affichage du QR code avec gestion du contraste
    function updateQRCodeDisplay() {
      if (!qrContainer.classList.contains('hidden') && qrImage.src) {
        const qrColor = qrColorInput?.value || '#000000';
        const isTransparent = transparentBgInput?.checked || false;
        const qrImageContainer = qrImage.parentElement;
        
        if (qrImageContainer) {
          if (isTransparent) {
            // Pour fond transparent, ajouter un motif damier en arri√®re-plan du conteneur
            qrImageContainer.style.backgroundImage = 'linear-gradient(45deg, #f0f0f0 25%, transparent 25%), linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f0f0f0 75%), linear-gradient(-45deg, transparent 75%, #f0f0f0 75%)';
            qrImageContainer.style.backgroundSize = '12px 12px';
            qrImageContainer.style.backgroundPosition = '0 0, 0 6px, 6px -6px, -6px 0px';
            
            // Si le QR code est blanc ou tr√®s clair, ajouter un contour sombre
            const rgb = hexToRgb(qrColor);
            if (rgb && (rgb.r > 200 && rgb.g > 200 && rgb.b > 200)) {
              qrImage.style.filter = 'drop-shadow(0 0 1px rgba(0,0,0,0.8))';
            } else {
              qrImage.style.filter = 'none';
            }
          } else {
            // Fond normal, pas de motif damier
            qrImageContainer.style.backgroundImage = 'none';
            qrImage.style.filter = 'none';
          }
        }
      }
    }

    // Fonction utilitaire pour convertir hex en RGB
    function hexToRgb(hex: string): {r: number, g: number, b: number} | null {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      console.log('Formulaire soumis'); // Debug
      
      // Animation du bouton de soumission
      const submitBtn = form.querySelector('button[type="submit"]') as HTMLElement;
      animateElement(submitBtn, [
        { transform: 'scale(1)' },
        { transform: 'scale(0.95)' },
        { transform: 'scale(1)' }
      ], {
        duration: 200
      });
      
      const formData = new FormData(form);
      const iban = formData.get('iban') as string;
      const amount = formData.get('amount') as string;
      const communication = formData.get('communication') as string;
      const beneficiary = formData.get('beneficiary') as string;

      console.log('Donn√©es:', { iban, amount, communication, beneficiary }); // Debug

      // Validation des champs obligatoires
      if (!iban || !amount || !communication) {
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('Veuillez remplir tous les champs obligatoires');
        return;
      }

      // Validation de l'IBAN belge
      const ibanClean = iban.replace(/\s/g, '');
      const belgianIbanRegex = /^BE[0-9]{14}$/;
      const belgianIbanWithSpacesRegex = /^BE[0-9]{2}\s[0-9]{4}\s[0-9]{4}\s[0-9]{4}$/;
      
      console.log('=== DEBUG VALIDATION IBAN ===');
      console.log('IBAN original:', iban);
      console.log('IBAN nettoy√©:', ibanClean);
      console.log('Longueur IBAN original:', iban.length);
      console.log('Longueur IBAN nettoy√©:', ibanClean.length);
      console.log('Test regex sans espaces:', belgianIbanRegex.test(ibanClean));
      console.log('Test regex avec espaces:', belgianIbanWithSpacesRegex.test(iban));
      console.log('Regex sans espaces:', belgianIbanRegex);
      console.log('Regex avec espaces:', belgianIbanWithSpacesRegex);
      
      if (!belgianIbanRegex.test(ibanClean) && !belgianIbanWithSpacesRegex.test(iban)) {
        console.log('‚ùå VALIDATION √âCHOU√âE');
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('Veuillez entrer un IBAN belge valide (format: BE68 5390 0754 7034)');
        return;
      }
      
      console.log('‚úÖ VALIDATION IBAN R√âUSSIE');

      // Validation du montant
      const amountNum = parseFloat(amount);
      if (isNaN(amountNum) || amountNum <= 0 || amountNum > 999999.99) {
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('Le montant doit √™tre compris entre 0.01‚Ç¨ et 999,999.99‚Ç¨');
        return;
      }

      // Validation de la communication
      if (communication.length < 3 || communication.length > 140) {
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('La communication doit contenir entre 3 et 140 caract√®res');
        return;
      }

      try {
        // Cr√©ation de la cha√Æne de donn√©es pour le QR code (format EPC)
        const qrData = `BCD
002
1
SCT

${beneficiary || ''}
${ibanClean}
EUR${amount}


${communication || ''}`;

        console.log('QR Data:', qrData); // Debug

        // G√©n√©ration du QR code via API
        const qrCodeUrl = await generateQRCodeWithColors(qrData, 300);
        
        // Animation de disparition du placeholder
        animateElement(placeholder, [
          { opacity: 1, transform: 'scale(1)' },
          { opacity: 0, transform: 'scale(0.8)' }
        ], {
          duration: 300,
          complete: () => {
            placeholder.classList.add('hidden');
            qrContainer.classList.remove('hidden');
            
            // Animation d'apparition du QR container
            animateElement(qrContainer, [
              { opacity: 0, transform: 'scale(0.8)' },
              { opacity: 1, transform: 'scale(1)' }
            ], {
              duration: 500,
              easing: 'ease-out'
            });
          }
        });
        
        // Affichage du QR code
        qrImage.src = qrCodeUrl;
        qrImage.onload = () => {
          console.log('QR Code charg√© avec couleurs personnalis√©es'); // Debug
          
          // Mettre √† jour l'affichage avec le motif damier si n√©cessaire
          updateQRCodeDisplay();
          
          // Animation du QR code
          setTimeout(() => {
            animateElement('.animate-zoom-in', [
              { transform: 'scale(0)' },
              { transform: 'scale(1.1)' },
              { transform: 'scale(1)' }
            ], {
              duration: 600,
              easing: 'ease-out'
            });
          }, 100);
          
          // Animation des d√©tails
          setTimeout(() => {
            animateElement('.animate-slide-up', [
              { opacity: 0, transform: 'translateY(30px)' },
              { opacity: 1, transform: 'translateY(0px)' }
            ], {
              duration: 400,
              easing: 'ease-out'
            });
          }, 400);
        };
        
        // Mise √† jour des d√©tails affich√©s
        displayIban.textContent = iban;
        displayAmount.textContent = amount;
        
        if (communication) {
          displayCommunication.textContent = communication;
          displayCommunicationContainer.classList.remove('hidden');
        } else {
          displayCommunicationContainer.classList.add('hidden');
        }
        
        if (beneficiary) {
          displayBeneficiary.textContent = beneficiary;
          displayBeneficiaryContainer.classList.remove('hidden');
        } else {
          displayBeneficiaryContainer.classList.add('hidden');
        }

      } catch (error) {
        console.error('Erreur lors de la g√©n√©ration du QR code:', error);
        alert('Erreur lors de la g√©n√©ration du QR code');
      }
    });

    // Fonction de t√©l√©chargement avec animation
    downloadBtn.addEventListener('click', async () => {
      try {
        // Animation du bouton
        animateElement(downloadBtn, [
          { transform: 'scale(1)' },
          { transform: 'scale(0.95)' },
          { transform: 'scale(1)' }
        ], {
          duration: 200
        });
        
        // R√©cup√©rer les donn√©es du formulaire
        const formData = new FormData(form);
        const iban = formData.get('iban') as string;
        const amount = formData.get('amount') as string;
        const communication = formData.get('communication') as string;
        const beneficiary = formData.get('beneficiary') as string;
        
        if (iban && amount && communication) {
          const ibanClean = iban.replace(/\s/g, '');
          const qrData = `BCD
002
1
SCT

${beneficiary || ''}
${ibanClean}
EUR${amount}


${communication || ''}`;

          console.log('D√©but du t√©l√©chargement...');
          
          // G√©n√©rer le QR code avec les couleurs personnalis√©es pour le t√©l√©chargement
          const customQrCodeUrl = await generateQRCodeWithColors(qrData, 300);
          
          console.log('QR Code g√©n√©r√© pour t√©l√©chargement:', customQrCodeUrl);
          
          // Cr√©er un nom de fichier descriptif
          const isTransparent = transparentBgInput?.checked || false;
          const qrColor = (qrColorInput?.value || '#000000').replace('#', '');
          const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
          const filename = `qr-payment-${amount}EUR-${isTransparent ? 'transparent' : 'colored'}-${timestamp}.png`;
          
          // T√©l√©charger le fichier
          if (customQrCodeUrl.startsWith('data:')) {
            // Si c'est une data URL (cas transparent), t√©l√©chargement direct
            const link = document.createElement('a');
            link.href = customQrCodeUrl;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            console.log('T√©l√©chargement direct (data URL) r√©ussi');
          } else {
            // Si c'est une URL externe, fetch puis t√©l√©chargement
            const response = await fetch(customQrCodeUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // Nettoyer l'URL temporaire
            window.URL.revokeObjectURL(url);
            console.log('T√©l√©chargement via fetch r√©ussi');
          }
          
          console.log('T√©l√©chargement du QR code avec couleurs personnalis√©es termin√©');
        }
      } catch (error) {
        console.error('Erreur lors du t√©l√©chargement:', error);
        alert('Erreur lors du t√©l√©chargement du QR code. Veuillez r√©essayer.');
      }
    });

    // Formatage automatique de l'IBAN avec animation
    const ibanInput = document.getElementById('iban') as HTMLInputElement;
    ibanInput?.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      let value = target.value.replace(/\s/g, '').toUpperCase();
      
      console.log('=== DEBUG FORMATAGE IBAN ===');
      console.log('Valeur avant formatage:', target.value);
      console.log('Valeur nettoy√©e:', value);
      
      // Limiter √† BE + 14 chiffres
      if (value.length > 16) {
        value = value.substring(0, 16);
        console.log('Valeur tronqu√©e:', value);
      }
      
      // Forcer le pr√©fixe BE si pas pr√©sent
      if (value.length > 0 && !value.startsWith('BE')) {
        if (value.startsWith('B')) {
          value = 'BE' + value.substring(1);
        } else {
          value = 'BE' + value;
        }
        console.log('Pr√©fixe BE ajout√©:', value);
      }
      
      // Formatage IBAN belge : BE12 3432 3423 2442
      let formatted = '';
      
      if (value.length >= 2) {
        formatted = value.substring(0, 2); // BE
        console.log('√âtape 1 - BE:', formatted);
        
        if (value.length > 2) {
          formatted += value.substring(2, 4); // BE12
          console.log('√âtape 2 - BE12:', formatted);
          
          if (value.length > 4) {
            formatted += ' ' + value.substring(4, 8); // BE12 3432
            console.log('√âtape 3 - BE12 3432:', formatted);
            
            if (value.length > 8) {
              formatted += ' ' + value.substring(8, 12); // BE12 3432 3423
              console.log('√âtape 4 - BE12 3432 3423:', formatted);
              
              if (value.length > 12) {
                formatted += ' ' + value.substring(12, 16); // BE12 3432 3423 2442
                console.log('√âtape 5 - BE12 3432 3423 2442:', formatted);
              }
            }
          }
        }
      }
      
      console.log('Valeur finale format√©e:', formatted);
      target.value = formatted;
      
      // Animation subtile lors de la saisie
      animateElement(target, [
        { borderColor: 'rgb(107, 114, 128)' },
        { borderColor: 'rgb(139, 92, 246)' },
        { borderColor: 'rgb(107, 114, 128)' }
      ], {
        duration: 300
      });
    });

    // Animations au focus des inputs
    const inputs = document.querySelectorAll('input, textarea');
    inputs.forEach(input => {
      input.addEventListener('focus', () => {
        if (input.parentElement) {
          animateElement(input.parentElement, [
            { transform: 'scale(1)' },
            { transform: 'scale(1.02)' },
            { transform: 'scale(1)' }
          ], {
            duration: 200
          });
        }
      });
    });

    // √âcouteurs d'√©v√©nements pour les boutons
    resetBtn?.addEventListener('click', resetForm);
    saveDefaultsBtn?.addEventListener('click', saveDefaults);

    // Fonction pour cr√©er un QR code avec fond transparent en traitant l'image
    async function createTransparentQRCode(imageUrl: string, qrColor: string): Promise<string> {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = 'anonymous';
        
        img.onload = () => {
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          
          if (!ctx) {
            reject('Impossible de cr√©er le contexte canvas');
            return;
          }
          
          canvas.width = img.width;
          canvas.height = img.height;
          
          // Dessiner l'image sur le canvas
          ctx.drawImage(img, 0, 0);
          
          // Obtenir les donn√©es de l'image
          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
          const data = imageData.data;
          
          // Convertir la couleur hex en RGB
          const targetColor = hexToRgb(qrColor);
          if (!targetColor) {
            reject('Couleur invalide');
            return;
          }
          
          // Traiter chaque pixel
          for (let i = 0; i < data.length; i += 4) {
            const r = data[i];
            const g = data[i + 1];
            const b = data[i + 2];
            
            // Si le pixel est blanc ou tr√®s clair (fond), le rendre transparent
            if (r > 240 && g > 240 && b > 240) {
              data[i + 3] = 0; // Alpha = 0 (transparent)
            } else if (r < 50 && g < 50 && b < 50) {
              // Si le pixel est noir (QR code), le remplacer par la couleur choisie
              data[i] = targetColor.r;     // Rouge
              data[i + 1] = targetColor.g; // Vert
              data[i + 2] = targetColor.b; // Bleu
              data[i + 3] = 255;           // Alpha = 255 (opaque)
            }
          }
          
          // Remettre les donn√©es modifi√©es sur le canvas
          ctx.putImageData(imageData, 0, 0);
          
          // Convertir en URL de donn√©es
          const transparentDataUrl = canvas.toDataURL('image/png');
          resolve(transparentDataUrl);
        };
        
        img.onerror = () => {
          reject('Erreur lors du chargement de l\'image');
        };
        
        img.src = imageUrl;
      });
    }

    // Fonction pour g√©n√©rer le QR code avec couleurs personnalis√©es (pour t√©l√©chargement)
    async function generateQRCodeWithColors(text: string, size: number = 300): Promise<string> {
      const qrColor = (qrColorInput?.value || '#000000').replace('#', '');
      const isTransparent = transparentBgInput?.checked || false;
      const bgColor = isTransparent ? '' : (bgColorInput?.value || '#FFFFFF').replace('#', '');
      const encodedText = encodeURIComponent(text);
      
      console.log('G√©n√©ration QR Code avec:', { qrColor, isTransparent, bgColor });
      
      if (isTransparent) {
        // Pour le fond transparent, g√©n√©rer d'abord avec fond blanc puis traiter
        const baseUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodedText}&format=png&margin=10&color=000000&bgcolor=FFFFFF`;
        console.log('URL de base pour transparence:', baseUrl);
        
        try {
          const transparentUrl = await createTransparentQRCode(baseUrl, '#' + qrColor);
          console.log('QR Code transparent cr√©√© avec succ√®s');
          return transparentUrl;
        } catch (error) {
          console.error('Erreur lors de la cr√©ation de la transparence:', error);
          // Fallback : retourner l'URL de base avec les couleurs demand√©es
          const fallbackUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodedText}&format=png&margin=10&color=${qrColor}&bgcolor=${bgColor || 'FFFFFF'}`;
          return fallbackUrl;
        }
      } else {
        // Fond color√© normal
        const url = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodedText}&format=png&margin=10&color=${qrColor}&bgcolor=${bgColor}`;
        console.log('URL QR Code avec fond color√©:', url);
        return url;
      }
    }
  });
</script>

<style>
  /* Animations CSS personnalis√©es */
  @keyframes float {
    0%, 100% { 
      transform: translateY(0px);
    }
    50% { 
      transform: translateY(-15px);
    }
  }
  
  @keyframes glow {
    0%, 100% { 
      box-shadow: 0 0 30px rgba(139, 92, 246, 0.2);
    }
    50% { 
      box-shadow: 0 0 50px rgba(139, 92, 246, 0.4);
    }
  }
  
  @keyframes pulse-glow {
    0%, 100% {
      box-shadow: 0 0 20px rgba(139, 92, 246, 0.3);
    }
    50% {
      box-shadow: 0 0 40px rgba(139, 92, 246, 0.6);
    }
  }
  
  @keyframes gradient-shift {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
  
  .float-animation {
    animation: float 4s ease-in-out infinite;
  }
  
  .glow-animation {
    animation: glow 3s ease-in-out infinite;
  }
  
  .pulse-glow {
    animation: pulse-glow 2s ease-in-out infinite;
  }
  
  .gradient-animation {
    background-size: 200% 200%;
    animation: gradient-shift 3s ease infinite;
  }
  
  /* Effets de hover am√©lior√©s */
  .group:hover .group-hover\:border-purple-400 {
    border-color: rgb(196, 181, 253);
  }
  
  /* Transitions fluides */
  * {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Effets de glassmorphism */
  .backdrop-blur-xl {
    backdrop-filter: blur(20px);
  }
  
  /* Scrollbar personnalis√©e */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: rgba(55, 65, 81, 0.3);
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb {
    background: linear-gradient(to bottom, rgb(139, 92, 246), rgb(219, 39, 119));
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(to bottom, rgb(124, 58, 237), rgb(190, 24, 93));
  }
  
  /* Enlever les fl√®ches des inputs number */
  .no-arrows::-webkit-outer-spin-button,
  .no-arrows::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  .no-arrows[type=number] {
    -moz-appearance: textfield;
  }
  
  /* Am√©lioration des validations visuelles */
  input:invalid {
    border-color: rgb(239, 68, 68) !important;
  }
  
  input:valid {
    border-color: rgb(34, 197, 94);
  }
  
  textarea:invalid {
    border-color: rgb(239, 68, 68) !important;
  }
  
  textarea:valid {
    border-color: rgb(34, 197, 94);
  }
  
  /* Animation pour les champs requis */
  input:required:focus,
  textarea:required:focus {
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }

  /* Am√©liorations pour l'accessibilit√© */
  button:focus-visible,
  input:focus-visible,
  textarea:focus-visible {
    outline: 2px solid rgb(139, 92, 246);
    outline-offset: 2px;
  }

  /* Responsive pour les textes longs */
  .break-words {
    word-wrap: break-word;
    word-break: break-word;
    hyphens: auto;
  }

  /* Am√©lioration des boutons sur mobile */
  @media (max-width: 640px) {
    button {
      min-height: 44px; /* Taille minimum recommand√©e pour le touch */
    }
    
    input[type="color"] {
      min-width: 44px;
      min-height: 44px;
    }
  }

  /* Animation pour les √©tats de chargement */
  .loading {
    opacity: 0.7;
    pointer-events: none;
  }

  /* Am√©lioration du contraste pour l'accessibilit√© */
  .text-gray-400 {
    color: rgb(156, 163, 175);
  }

  .text-gray-300 {
    color: rgb(209, 213, 219);
  }

  /* Responsive pour les grilles */
  @media (max-width: 1279px) {
    .xl\:grid-cols-2 {
      grid-template-columns: 1fr;
    }
  }

  /* Am√©lioration des espacements sur mobile */
  @media (max-width: 640px) {
    .space-y-6 > * + * {
      margin-top: 1rem;
    }
    
    .gap-3 {
      gap: 0.5rem;
    }
  }
</style> 