---
// Le QR code sera g√©n√©r√© c√¥t√© client avec JavaScript
---

<div class="max-w-6xl mx-auto p-8">
  <!-- Header avec animation -->
  <div class="text-center mb-12 animate-fade-in">
    <div class="inline-block p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 mb-6 float-animation">
      <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
      </svg>
    </div>
    <h1 class="text-5xl font-bold bg-gradient-to-r from-purple-400 via-pink-400 to-indigo-400 bg-clip-text text-transparent mb-4">
      G√©n√©rateur QR Code
    </h1>
    <p class="text-xl text-gray-300 max-w-2xl mx-auto">
      Cr√©ez des QR codes √©l√©gants pour vos paiements bancaires instantan√©s
    </p>
  </div>

  <div class="grid lg:grid-cols-2 gap-12">
    <!-- Formulaire de saisie -->
    <div class="space-y-8 animate-slide-in-left">
      <div class="bg-gradient-to-br from-gray-800/80 to-gray-900/80 backdrop-blur-xl p-8 rounded-3xl border border-gray-700/50 shadow-2xl glow-animation">
        <h2 class="text-3xl font-bold text-white mb-6 flex items-center">
          <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg mr-3 flex items-center justify-center">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
            </svg>
          </div>
          Informations de paiement
        </h2>
        
        <form id="payment-form" class="space-y-6">
          <!-- IBAN -->
          <div class="group">
            <label for="iban" class="block text-sm font-semibold text-gray-300 mb-3">
              IBAN belge du destinataire *
            </label>
            <div class="relative">
              <input
                type="text"
                id="iban"
                name="iban"
                placeholder="BE68 5390 0754 7034"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400"
                required
                maxlength="19"
                title="Veuillez entrer un IBAN belge valide (format: BE68 5390 0754 7034)"
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
                </svg>
              </div>
            </div>
            <p class="text-xs text-gray-400 mt-1">Format: BE68 5390 0754 7034</p>
          </div>

          <!-- Montant -->
          <div class="group">
            <label for="amount" class="block text-sm font-semibold text-gray-300 mb-3">
              Montant (‚Ç¨) *
            </label>
            <div class="relative">
              <input
                type="number"
                id="amount"
                name="amount"
                placeholder="0.00"
                step="0.01"
                min="0.01"
                max="999999.99"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400 no-arrows"
                required
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <span class="text-purple-400 font-semibold">‚Ç¨</span>
              </div>
            </div>
            <p class="text-xs text-gray-400 mt-1">Montant minimum: 0.01‚Ç¨</p>
          </div>

          <!-- Communication -->
          <div class="group">
            <label for="communication" class="block text-sm font-semibold text-gray-300 mb-3">
              Communication / R√©f√©rence *
            </label>
            <textarea
              id="communication"
              name="communication"
              placeholder="Description du paiement (obligatoire)"
              rows="3"
              class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 resize-none group-hover:border-purple-400"
              required
              minlength="3"
              maxlength="140"
            ></textarea>
            <p class="text-xs text-gray-400 mt-1">Entre 3 et 140 caract√®res</p>
          </div>

          <!-- Nom du b√©n√©ficiaire -->
          <div class="group">
            <label for="beneficiary" class="block text-sm font-semibold text-gray-300 mb-3">
              Nom du b√©n√©ficiaire
            </label>
            <div class="relative">
              <input
                type="text"
                id="beneficiary"
                name="beneficiary"
                placeholder="Nom du destinataire"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400"
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              </div>
            </div>
          </div>

          <button
            type="submit"
            class="w-full bg-gradient-to-r from-purple-600 via-pink-600 to-indigo-600 text-white py-4 px-8 rounded-xl font-bold text-lg hover:from-purple-700 hover:via-pink-700 hover:to-indigo-700 transform hover:scale-105 transition-all duration-300 shadow-2xl hover:shadow-purple-500/25 relative overflow-hidden group"
          >
            <span class="relative z-10">G√©n√©rer le QR Code ‚ú®</span>
            <div class="absolute inset-0 bg-gradient-to-r from-purple-600 to-pink-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          </button>

          <!-- Boutons d'actions -->
          <div class="grid grid-cols-2 gap-4 mt-4">
            <button
              type="button"
              id="reset-btn"
              class="bg-gradient-to-r from-gray-600 to-gray-700 text-white py-3 px-6 rounded-xl font-semibold hover:from-gray-700 hover:to-gray-800 transition-all duration-300 transform hover:scale-105"
            >
              üîÑ Reset
            </button>
            
            <button
              type="button"
              id="save-defaults-btn"
              class="bg-gradient-to-r from-emerald-600 to-teal-600 text-white py-3 px-6 rounded-xl font-semibold hover:from-emerald-700 hover:to-teal-700 transition-all duration-300 transform hover:scale-105"
            >
              üíæ Sauvegarder
            </button>
          </div>

          <!-- Indicateur de sauvegarde -->
          <div id="save-indicator" class="hidden mt-3 p-3 bg-green-900/50 border border-green-500/30 rounded-lg text-green-300 text-sm text-center">
            ‚úÖ Valeurs par d√©faut sauvegard√©es !
          </div>
        </form>
      </div>
    </div>

    <!-- Zone d'affichage du QR Code -->
    <div class="space-y-8 animate-slide-in-right">
      <div class="bg-gradient-to-br from-gray-800/80 to-gray-900/80 backdrop-blur-xl p-8 rounded-3xl border border-gray-700/50 shadow-2xl min-h-[500px] flex flex-col items-center justify-center">
        <div id="qr-container" class="hidden w-full">
          <div class="text-center mb-6 animate-fade-in">
            <h3 class="text-2xl font-bold text-white mb-3">
              üéâ Votre QR Code de Paiement
            </h3>
            <p class="text-gray-300">
              Scannez avec votre application bancaire
            </p>
          </div>
          
          <div class="bg-white p-8 rounded-2xl shadow-2xl mx-auto w-fit animate-zoom-in">
            <img id="qr-image" src="" alt="QR Code de paiement" class="mx-auto rounded-lg" />
          </div>
          
          <div id="payment-details" class="mt-6 p-6 bg-gradient-to-r from-blue-900/50 to-purple-900/50 rounded-2xl border border-blue-500/30 animate-slide-up">
            <h4 class="font-bold text-white mb-4 flex items-center">
              <svg class="w-5 h-5 mr-2 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              D√©tails du paiement
            </h4>
            <div class="text-sm text-gray-300 space-y-2">
              <div class="flex justify-between items-center p-2 bg-gray-800/50 rounded-lg">
                <strong class="text-blue-400">IBAN :</strong> 
                <span id="display-iban" class="font-mono"></span>
              </div>
              <div class="flex justify-between items-center p-2 bg-gray-800/50 rounded-lg">
                <strong class="text-green-400">Montant :</strong>
                <div class="flex items-center gap-1">
                  <span id="display-amount"></span> ‚Ç¨
                </div>
              </div>
              <div id="display-communication-container" class="hidden">
                <div class="flex justify-between items-center p-2 bg-gray-800/50 rounded-lg">
                  <strong class="text-purple-400">Communication :</strong> 
                  <span id="display-communication"></span>
                </div>
              </div>
              <div id="display-beneficiary-container" class="hidden">
                <div class="flex justify-between items-center p-2 bg-gray-800/50 rounded-lg">
                  <strong class="text-pink-400">B√©n√©ficiaire :</strong> 
                  <span id="display-beneficiary"></span>
                </div>
              </div>
            </div>
          </div>

          <button
            id="download-btn"
            class="mt-6 w-full bg-gradient-to-r from-green-600 to-emerald-600 text-white py-3 px-6 rounded-xl font-semibold hover:from-green-700 hover:to-emerald-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-green-500/25"
          >
            üì• T√©l√©charger le QR Code
          </button>
        </div>

        <div id="placeholder" class="text-center animate-pulse">
          <div class="w-32 h-32 bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-full mx-auto mb-6 flex items-center justify-center float-animation">
            <svg class="w-16 h-16 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
            </svg>
          </div>
          <h3 class="text-2xl font-semibold text-gray-400 mb-3">
            ‚ú® QR Code de Paiement
          </h3>
          <p class="text-gray-500 max-w-sm mx-auto">
            Remplissez le formulaire pour g√©n√©rer votre QR code √©l√©gant
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Fonction d'animation personnalis√©e (remplace animatejs)
  function animateElement(element: Element | string, keyframes: any, options: any = {}) {
    const el = typeof element === 'string' ? document.querySelector(element) : element;
    if (!el) return;
    
    const animation = (el as Element).animate(keyframes, {
      duration: options.duration || 300,
      easing: options.easing || 'ease',
      delay: options.delay || 0,
      fill: 'forwards'
    });
    
    if (options.complete) {
      animation.addEventListener('finish', options.complete);
    }
    
    return animation;
  }

  // Script inline pour QR Code generation (sans d√©pendance externe)
  function generateQRCode(text: string, size: number = 300): string {
    // Utilisation de l'API QR Server (service gratuit)
    const encodedText = encodeURIComponent(text);
    return `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodedText}&format=png&margin=10`;
  }

  // Attendre que le DOM soit charg√©
  document.addEventListener('DOMContentLoaded', () => {
    // Animations d'entr√©e
    setTimeout(() => {
      animateElement('.animate-fade-in', [
        { opacity: 0, transform: 'translateY(30px)' },
        { opacity: 1, transform: 'translateY(0px)' }
      ], {
        duration: 800,
        easing: 'ease-out'
      });
    }, 100);

    setTimeout(() => {
      animateElement('.animate-slide-in-left', [
        { opacity: 0, transform: 'translateX(-50px)' },
        { opacity: 1, transform: 'translateX(0px)' }
      ], {
        duration: 1000,
        easing: 'ease-out'
      });
    }, 300);

    setTimeout(() => {
      animateElement('.animate-slide-in-right', [
        { opacity: 0, transform: 'translateX(50px)' },
        { opacity: 1, transform: 'translateX(0px)' }
      ], {
        duration: 1000,
        easing: 'ease-out'
      });
    }, 500);

    const form = document.getElementById('payment-form') as HTMLFormElement;
    const qrContainer = document.getElementById('qr-container') as HTMLElement;
    const placeholder = document.getElementById('placeholder') as HTMLElement;
    const qrImage = document.getElementById('qr-image') as HTMLImageElement;
    const downloadBtn = document.getElementById('download-btn') as HTMLButtonElement;
    const resetBtn = document.getElementById('reset-btn') as HTMLButtonElement;
    const saveDefaultsBtn = document.getElementById('save-defaults-btn') as HTMLButtonElement;
    const saveIndicator = document.getElementById('save-indicator') as HTMLElement;

    // √âl√©ments d'affichage des d√©tails
    const displayIban = document.getElementById('display-iban') as HTMLElement;
    const displayAmount = document.getElementById('display-amount') as HTMLElement;
    const displayCommunication = document.getElementById('display-communication') as HTMLElement;
    const displayCommunicationContainer = document.getElementById('display-communication-container') as HTMLElement;
    const displayBeneficiary = document.getElementById('display-beneficiary') as HTMLElement;
    const displayBeneficiaryContainer = document.getElementById('display-beneficiary-container') as HTMLElement;

    // √âl√©ments du formulaire
    const amountInput = document.getElementById('amount') as HTMLInputElement;
    const communicationInput = document.getElementById('communication') as HTMLTextAreaElement;
    const beneficiaryInput = document.getElementById('beneficiary') as HTMLInputElement;

    if (!form) {
      console.error('Formulaire non trouv√©');
      return;
    }

    // Charger les valeurs par d√©faut au d√©marrage
    loadDefaults();

    // Fonction pour charger les valeurs par d√©faut
    function loadDefaults() {
      try {
        const savedDefaults = localStorage.getItem('qr-payment-defaults');
        if (savedDefaults) {
          const defaults = JSON.parse(savedDefaults);
          console.log('Chargement des valeurs par d√©faut:', defaults);
          
          if (defaults.amount && amountInput) {
            amountInput.value = defaults.amount;
          }
          if (defaults.communication && communicationInput) {
            communicationInput.value = defaults.communication;
          }
          if (defaults.beneficiary && beneficiaryInput) {
            beneficiaryInput.value = defaults.beneficiary;
          }
        }
      } catch (error) {
        console.error('Erreur lors du chargement des valeurs par d√©faut:', error);
      }
    }

    // Fonction pour sauvegarder les valeurs par d√©faut
    function saveDefaults() {
      try {
        const defaults = {
          amount: amountInput?.value || '',
          communication: communicationInput?.value || '',
          beneficiary: beneficiaryInput?.value || ''
        };
        
        localStorage.setItem('qr-payment-defaults', JSON.stringify(defaults));
        console.log('Valeurs par d√©faut sauvegard√©es:', defaults);
        
        // Afficher l'indicateur de sauvegarde
        saveIndicator.classList.remove('hidden');
        animateElement(saveIndicator, [
          { opacity: 0, transform: 'translateY(-10px)' },
          { opacity: 1, transform: 'translateY(0px)' }
        ], {
          duration: 300
        });
        
        // Masquer l'indicateur apr√®s 3 secondes
        setTimeout(() => {
          animateElement(saveIndicator, [
            { opacity: 1, transform: 'translateY(0px)' },
            { opacity: 0, transform: 'translateY(-10px)' }
          ], {
            duration: 300,
            complete: () => {
              saveIndicator.classList.add('hidden');
            }
          });
        }, 3000);
        
      } catch (error) {
        console.error('Erreur lors de la sauvegarde:', error);
        alert('Erreur lors de la sauvegarde des valeurs par d√©faut');
      }
    }

    // Fonction pour reset le formulaire
    function resetForm() {
      form.reset();
      
      // Masquer le QR code et afficher le placeholder
      qrContainer.classList.add('hidden');
      placeholder.classList.remove('hidden');
      
      // Animation de reset
      animateElement(form, [
        { transform: 'scale(1)' },
        { transform: 'scale(0.98)' },
        { transform: 'scale(1)' }
      ], {
        duration: 300
      });
      
      console.log('Formulaire r√©initialis√©');
    }

    form.addEventListener('submit', (e) => {
      e.preventDefault();
      console.log('Formulaire soumis'); // Debug
      
      // Animation du bouton de soumission
      const submitBtn = form.querySelector('button[type="submit"]') as HTMLElement;
      animateElement(submitBtn, [
        { transform: 'scale(1)' },
        { transform: 'scale(0.95)' },
        { transform: 'scale(1)' }
      ], {
        duration: 200
      });
      
      const formData = new FormData(form);
      const iban = formData.get('iban') as string;
      const amount = formData.get('amount') as string;
      const communication = formData.get('communication') as string;
      const beneficiary = formData.get('beneficiary') as string;

      console.log('Donn√©es:', { iban, amount, communication, beneficiary }); // Debug

      // Validation des champs obligatoires
      if (!iban || !amount || !communication) {
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('Veuillez remplir tous les champs obligatoires');
        return;
      }

      // Validation de l'IBAN belge
      const ibanClean = iban.replace(/\s/g, '');
      const belgianIbanRegex = /^BE[0-9]{14}$/;
      const belgianIbanWithSpacesRegex = /^BE[0-9]{2}\s[0-9]{4}\s[0-9]{4}\s[0-9]{4}$/;
      
      console.log('=== DEBUG VALIDATION IBAN ===');
      console.log('IBAN original:', iban);
      console.log('IBAN nettoy√©:', ibanClean);
      console.log('Longueur IBAN original:', iban.length);
      console.log('Longueur IBAN nettoy√©:', ibanClean.length);
      console.log('Test regex sans espaces:', belgianIbanRegex.test(ibanClean));
      console.log('Test regex avec espaces:', belgianIbanWithSpacesRegex.test(iban));
      console.log('Regex sans espaces:', belgianIbanRegex);
      console.log('Regex avec espaces:', belgianIbanWithSpacesRegex);
      
      if (!belgianIbanRegex.test(ibanClean) && !belgianIbanWithSpacesRegex.test(iban)) {
        console.log('‚ùå VALIDATION √âCHOU√âE');
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('Veuillez entrer un IBAN belge valide (format: BE68 5390 0754 7034)');
        return;
      }
      
      console.log('‚úÖ VALIDATION IBAN R√âUSSIE');

      // Validation du montant
      const amountNum = parseFloat(amount);
      if (isNaN(amountNum) || amountNum <= 0 || amountNum > 999999.99) {
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('Le montant doit √™tre compris entre 0.01‚Ç¨ et 999,999.99‚Ç¨');
        return;
      }

      // Validation de la communication
      if (communication.length < 3 || communication.length > 140) {
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('La communication doit contenir entre 3 et 140 caract√®res');
        return;
      }

      try {
        // Cr√©ation de la cha√Æne de donn√©es pour le QR code (format EPC)
        const qrData = `BCD
002
1
SCT

${beneficiary || ''}
${ibanClean}
EUR${amount}


${communication || ''}`;

        console.log('QR Data:', qrData); // Debug

        // G√©n√©ration du QR code via API
        const qrCodeUrl = generateQRCode(qrData, 300);
        
        // Animation de disparition du placeholder
        animateElement(placeholder, [
          { opacity: 1, transform: 'scale(1)' },
          { opacity: 0, transform: 'scale(0.8)' }
        ], {
          duration: 300,
          complete: () => {
            placeholder.classList.add('hidden');
            qrContainer.classList.remove('hidden');
            
            // Animation d'apparition du QR container
            animateElement(qrContainer, [
              { opacity: 0, transform: 'scale(0.8)' },
              { opacity: 1, transform: 'scale(1)' }
            ], {
              duration: 500,
              easing: 'ease-out'
            });
          }
        });
        
        // Affichage du QR code
        qrImage.src = qrCodeUrl;
        qrImage.onload = () => {
          console.log('QR Code charg√©'); // Debug
          
          // Animation du QR code
          setTimeout(() => {
            animateElement('.animate-zoom-in', [
              { transform: 'scale(0)' },
              { transform: 'scale(1.1)' },
              { transform: 'scale(1)' }
            ], {
              duration: 600,
              easing: 'ease-out'
            });
          }, 100);
          
          // Animation des d√©tails
          setTimeout(() => {
            animateElement('.animate-slide-up', [
              { opacity: 0, transform: 'translateY(30px)' },
              { opacity: 1, transform: 'translateY(0px)' }
            ], {
              duration: 400,
              easing: 'ease-out'
            });
          }, 400);
        };
        
        // Mise √† jour des d√©tails affich√©s
        displayIban.textContent = iban;
        displayAmount.textContent = amount;
        
        if (communication) {
          displayCommunication.textContent = communication;
          displayCommunicationContainer.classList.remove('hidden');
        } else {
          displayCommunicationContainer.classList.add('hidden');
        }
        
        if (beneficiary) {
          displayBeneficiary.textContent = beneficiary;
          displayBeneficiaryContainer.classList.remove('hidden');
        } else {
          displayBeneficiaryContainer.classList.add('hidden');
        }

      } catch (error) {
        console.error('Erreur lors de la g√©n√©ration du QR code:', error);
        alert('Erreur lors de la g√©n√©ration du QR code');
      }
    });

    // Fonction de t√©l√©chargement avec animation
    downloadBtn?.addEventListener('click', () => {
      if (qrImage.src) {
        // Animation du bouton de t√©l√©chargement
        animateElement(downloadBtn, [
          { transform: 'scale(1)' },
          { transform: 'scale(0.95)' },
          { transform: 'scale(1)' }
        ], {
          duration: 200
        });
        
        const link = document.createElement('a');
        link.download = 'qr-code-paiement.png';
        link.href = qrImage.src;
        link.click();
      }
    });

    // Formatage automatique de l'IBAN avec animation
    const ibanInput = document.getElementById('iban') as HTMLInputElement;
    ibanInput?.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      let value = target.value.replace(/\s/g, '').toUpperCase();
      
      console.log('=== DEBUG FORMATAGE IBAN ===');
      console.log('Valeur avant formatage:', target.value);
      console.log('Valeur nettoy√©e:', value);
      
      // Limiter √† BE + 14 chiffres
      if (value.length > 16) {
        value = value.substring(0, 16);
        console.log('Valeur tronqu√©e:', value);
      }
      
      // Forcer le pr√©fixe BE si pas pr√©sent
      if (value.length > 0 && !value.startsWith('BE')) {
        if (value.startsWith('B')) {
          value = 'BE' + value.substring(1);
        } else {
          value = 'BE' + value;
        }
        console.log('Pr√©fixe BE ajout√©:', value);
      }
      
      // Formatage IBAN belge : BE12 3432 3423 2442
      let formatted = '';
      
      if (value.length >= 2) {
        formatted = value.substring(0, 2); // BE
        console.log('√âtape 1 - BE:', formatted);
        
        if (value.length > 2) {
          formatted += value.substring(2, 4); // BE12
          console.log('√âtape 2 - BE12:', formatted);
          
          if (value.length > 4) {
            formatted += ' ' + value.substring(4, 8); // BE12 3432
            console.log('√âtape 3 - BE12 3432:', formatted);
            
            if (value.length > 8) {
              formatted += ' ' + value.substring(8, 12); // BE12 3432 3423
              console.log('√âtape 4 - BE12 3432 3423:', formatted);
              
              if (value.length > 12) {
                formatted += ' ' + value.substring(12, 16); // BE12 3432 3423 2442
                console.log('√âtape 5 - BE12 3432 3423 2442:', formatted);
              }
            }
          }
        }
      }
      
      console.log('Valeur finale format√©e:', formatted);
      target.value = formatted;
      
      // Animation subtile lors de la saisie
      animateElement(target, [
        { borderColor: 'rgb(107, 114, 128)' },
        { borderColor: 'rgb(139, 92, 246)' },
        { borderColor: 'rgb(107, 114, 128)' }
      ], {
        duration: 300
      });
    });

    // Animations au focus des inputs
    const inputs = document.querySelectorAll('input, textarea');
    inputs.forEach(input => {
      input.addEventListener('focus', () => {
        if (input.parentElement) {
          animateElement(input.parentElement, [
            { transform: 'scale(1)' },
            { transform: 'scale(1.02)' },
            { transform: 'scale(1)' }
          ], {
            duration: 200
          });
        }
      });
    });

    // √âcouteurs d'√©v√©nements pour les boutons
    resetBtn?.addEventListener('click', resetForm);
    saveDefaultsBtn?.addEventListener('click', saveDefaults);
  });
</script>

<style>
  /* Animations CSS personnalis√©es */
  @keyframes float {
    0%, 100% { 
      transform: translateY(0px);
    }
    50% { 
      transform: translateY(-15px);
    }
  }
  
  @keyframes glow {
    0%, 100% { 
      box-shadow: 0 0 30px rgba(139, 92, 246, 0.2);
    }
    50% { 
      box-shadow: 0 0 50px rgba(139, 92, 246, 0.4);
    }
  }
  
  @keyframes pulse-glow {
    0%, 100% {
      box-shadow: 0 0 20px rgba(139, 92, 246, 0.3);
    }
    50% {
      box-shadow: 0 0 40px rgba(139, 92, 246, 0.6);
    }
  }
  
  @keyframes gradient-shift {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
  
  .float-animation {
    animation: float 4s ease-in-out infinite;
  }
  
  .glow-animation {
    animation: glow 3s ease-in-out infinite;
  }
  
  .pulse-glow {
    animation: pulse-glow 2s ease-in-out infinite;
  }
  
  .gradient-animation {
    background-size: 200% 200%;
    animation: gradient-shift 3s ease infinite;
  }
  
  /* Effets de hover am√©lior√©s */
  .group:hover .group-hover\:border-purple-400 {
    border-color: rgb(196, 181, 253);
  }
  
  /* Transitions fluides */
  * {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Effets de glassmorphism */
  .backdrop-blur-xl {
    backdrop-filter: blur(20px);
  }
  
  /* Scrollbar personnalis√©e */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: rgba(55, 65, 81, 0.3);
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb {
    background: linear-gradient(to bottom, rgb(139, 92, 246), rgb(219, 39, 119));
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(to bottom, rgb(124, 58, 237), rgb(190, 24, 93));
  }
  
  /* Enlever les fl√®ches des inputs number */
  .no-arrows::-webkit-outer-spin-button,
  .no-arrows::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  .no-arrows[type=number] {
    -moz-appearance: textfield;
  }
  
  /* Am√©lioration des validations visuelles */
  input:invalid {
    border-color: rgb(239, 68, 68) !important;
  }
  
  input:valid {
    border-color: rgb(34, 197, 94);
  }
  
  textarea:invalid {
    border-color: rgb(239, 68, 68) !important;
  }
  
  textarea:valid {
    border-color: rgb(34, 197, 94);
  }
  
  /* Animation pour les champs requis */
  input:required:focus,
  textarea:required:focus {
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }
</style> 