---
// Le QR code sera g√©n√©r√© c√¥t√© client avec JavaScript
---

<div class="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
  <!-- Header avec animation -->
  <div class="text-center mb-8 lg:mb-12 animate-fade-in">
    <div
      class="inline-block p-3 sm:p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 mb-4 sm:mb-6 float-animation"
    >
      <svg
        class="w-8 h-8 sm:w-12 sm:h-12 text-white"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"
        ></path>
      </svg>
    </div>
    <h1
      class="text-3xl sm:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-purple-400 via-pink-400 to-indigo-400 bg-clip-text text-transparent mb-3 sm:mb-4"
    >
      G√©n√©rateur QR Code
    </h1>
    <p class="text-lg sm:text-xl text-gray-300 max-w-2xl mx-auto px-4">
      Cr√©ez des QR codes √©l√©gants pour vos paiements bancaires instantan√©s
    </p>
  </div>

  <div class="grid xl:grid-cols-2 gap-6 lg:gap-12">
    <!-- Formulaire de saisie -->
    <div class="space-y-6 lg:space-y-8 animate-slide-in-left order-1">
      <div
        class="bg-gradient-to-br from-gray-800/80 to-gray-900/80 backdrop-blur-xl p-6 lg:p-8 rounded-3xl border border-gray-700/50 shadow-2xl glow-animation"
      >
        <h2
          class="text-2xl lg:text-3xl font-bold text-white mb-6 flex items-center"
        >
          <div
            class="w-6 h-6 lg:w-8 lg:h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg mr-3 flex items-center justify-center"
          >
            <svg
              class="w-4 h-4 lg:w-5 lg:h-5 text-white"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"
              ></path>
            </svg>
          </div>
          <span class="text-lg lg:text-2xl">Informations de paiement</span>
        </h2>

        <form id="payment-form" class="space-y-6">
          <!-- IBAN -->
          <div class="group">
            <label
              for="iban"
              class="block text-sm font-semibold text-gray-300 mb-3"
            >
              IBAN belge du destinataire *
            </label>
            <div class="relative">
              <input
                type="text"
                id="iban"
                name="iban"
                placeholder="BE68 5390 0754 7034"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400"
                required
                maxlength="19"
                title="Veuillez entrer un IBAN belge valide (format: BE68 5390 0754 7034)"
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <svg
                  class="w-5 h-5 text-gray-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"
                  ></path>
                </svg>
              </div>
            </div>
            <p class="text-xs text-gray-400 mt-1">
              Format: BE68 5390 0754 7034
            </p>
          </div>

          <!-- Montant -->
          <div class="group">
            <label
              for="amount"
              class="block text-sm font-semibold text-gray-300 mb-3"
            >
              Montant (‚Ç¨) *
            </label>
            <div class="relative">
              <input
                type="number"
                id="amount"
                name="amount"
                placeholder="0.00"
                step="0.01"
                min="0.01"
                max="999999.99"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400 no-arrows"
                required
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <span class="text-purple-400 font-semibold">‚Ç¨</span>
              </div>
            </div>
            <p class="text-xs text-gray-400 mt-1">Montant minimum: 0.01‚Ç¨</p>
          </div>

          <!-- Communication -->
          <div class="group">
            <label
              for="communication"
              class="block text-sm font-semibold text-gray-300 mb-3"
            >
              Communication / R√©f√©rence
            </label>
            <textarea
              id="communication"
              name="communication"
              placeholder="Description du paiement (optionnel)"
              rows="3"
              class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 resize-none group-hover:border-purple-400"
              minlength="3"
              maxlength="140"></textarea>
            <p class="text-xs text-gray-400 mt-1">
              Optionnel - Entre 3 et 140 caract√®res si renseign√©
            </p>
          </div>

          <!-- Nom du b√©n√©ficiaire -->
          <div class="group">
            <label
              for="beneficiary"
              class="block text-sm font-semibold text-gray-300 mb-3"
            >
              Nom du b√©n√©ficiaire
            </label>
            <div class="relative">
              <input
                type="text"
                id="beneficiary"
                name="beneficiary"
                placeholder="Nom du destinataire"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400"
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <svg
                  class="w-5 h-5 text-gray-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                  ></path>
                </svg>
              </div>
            </div>
          </div>

          <button
            type="submit"
            class="w-full bg-gradient-to-r from-purple-600 via-pink-600 to-indigo-600 text-white py-3 sm:py-4 px-6 sm:px-8 rounded-xl font-bold text-base sm:text-lg hover:from-purple-700 hover:via-pink-700 hover:to-indigo-700 transform hover:scale-105 transition-all duration-300 shadow-2xl hover:shadow-purple-500/25 relative overflow-hidden group"
          >
            <span class="relative z-10 flex items-center justify-center gap-2">
              <span>G√©n√©rer le QR Code</span>
              <span>‚ú®</span>
            </span>
            <div
              class="absolute inset-0 bg-gradient-to-r from-purple-600 to-pink-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"
            >
            </div>
          </button>

          <!-- Boutons d'actions -->
          <div class="flex flex-col sm:flex-row gap-3 sm:gap-4 mt-6">
            <button
              type="button"
              id="reset-btn"
              class="flex-1 bg-gradient-to-r from-gray-600 to-gray-700 text-white py-3 px-4 rounded-xl font-semibold hover:from-gray-700 hover:to-gray-800 transition-all duration-300 transform hover:scale-105 text-sm sm:text-base"
            >
              <span class="flex items-center justify-center gap-2">
                <span>üîÑ</span>
                <span>Reset</span>
              </span>
            </button>

            <button
              type="button"
              id="save-defaults-btn"
              class="flex-1 bg-gradient-to-r from-emerald-600 to-teal-600 text-white py-3 px-4 rounded-xl font-semibold hover:from-emerald-700 hover:to-teal-700 transition-all duration-300 transform hover:scale-105 text-sm sm:text-base"
            >
              <span class="flex items-center justify-center gap-2">
                <span>üíæ</span>
                <span>Sauvegarder</span>
              </span>
            </button>

            <a
              href="/history"
              class="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 text-white py-3 px-4 rounded-xl font-semibold hover:from-purple-700 hover:to-pink-700 transition-all duration-300 transform hover:scale-105 text-sm sm:text-base text-center"
            >
              <span class="flex items-center justify-center gap-2">
                <span>üìö</span>
                <span>Historique</span>
              </span>
            </a>
          </div>

          <!-- Indicateur de sauvegarde -->
          <div
            id="save-indicator"
            class="hidden mt-3 p-3 bg-green-900/50 border border-green-500/30 rounded-lg text-green-300 text-sm text-center"
          >
            ‚úÖ Valeurs par d√©faut sauvegard√©es !
          </div>

          <!-- Syst√®me d'onglets pour les fonctionnalit√©s avanc√©es -->
          <div class="mt-8">
            <!-- Navigation des onglets -->
            <div
              class="flex flex-wrap gap-2 mb-6 p-1 bg-gray-800/50 rounded-xl border border-gray-700/50"
            >
              <button
                type="button"
                id="tab-colors"
                class="tab-button active flex-1 min-w-0 px-3 sm:px-4 py-2 sm:py-3 rounded-lg font-semibold text-xs sm:text-sm transition-all duration-300 flex items-center justify-center gap-1 sm:gap-2"
              >
                <span class="text-base sm:text-lg">üé®</span>
                <span class="hidden sm:inline">Couleurs</span>
                <span class="sm:hidden">üé®</span>
              </button>

              <button
                type="button"
                id="tab-creative"
                class="tab-button hidden flex-1 min-w-0 px-3 sm:px-4 py-2 sm:py-3 rounded-lg font-semibold text-xs sm:text-sm transition-all duration-300 flex items-center justify-center gap-1 sm:gap-2"
              >
                <span class="text-base sm:text-lg">‚ú®</span>
                <span class="hidden sm:inline">Cr√©ativit√©</span>
                <span class="sm:hidden">‚ú®</span>
              </button>

              <button
                type="button"
                id="tab-productivity"
                class="tab-button flex-1 min-w-0 px-3 sm:px-4 py-2 sm:py-3 rounded-lg font-semibold text-xs sm:text-sm transition-all duration-300 flex items-center justify-center gap-1 sm:gap-2"
              >
                <span class="text-base sm:text-lg">‚ö°</span>
                <span class="hidden sm:inline">Productivit√©</span>
                <span class="sm:hidden">‚ö°</span>
              </button>
            </div>

            <!-- Contenu des onglets -->
            <div class="tab-content-container">
              <!-- Onglet Couleurs -->
              <div id="content-colors" class="tab-content active">
                <div
                  class="p-4 sm:p-6 bg-gradient-to-r from-indigo-900/30 to-purple-900/30 rounded-xl border border-indigo-500/30"
                >
                  <h3
                    class="text-lg sm:text-xl font-bold text-white mb-4 flex items-center flex-wrap gap-2"
                  >
                    <svg
                      class="w-5 h-5 text-indigo-400 flex-shrink-0"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a4 4 0 004-4V5z"
                      ></path>
                    </svg>
                    <span>üé® Personnalisation des Couleurs</span>
                  </h3>

                  <div
                    class="space-y-4 sm:space-y-0 sm:grid sm:grid-cols-2 sm:gap-4"
                  >
                    <!-- Couleur du QR Code -->
                    <div class="group">
                      <label
                        for="qr-color"
                        class="block text-sm font-semibold text-gray-300 mb-3"
                      >
                        Couleur du QR Code
                      </label>
                      <div class="flex items-center gap-3">
                        <input
                          type="color"
                          id="qr-color"
                          name="qr-color"
                          value="#000000"
                          class="w-12 h-12 rounded-lg border-2 border-gray-600 cursor-pointer hover:border-purple-400 transition-colors flex-shrink-0"
                        />
                        <span
                          id="qr-color-value"
                          class="text-gray-300 font-mono text-sm">#000000</span
                        >
                      </div>
                    </div>

                    <!-- Couleur du fond -->
                    <div class="group">
                      <label
                        for="bg-color"
                        class="block text-sm font-semibold text-gray-300 mb-3"
                      >
                        Couleur du fond
                      </label>
                      <div class="flex items-center gap-3">
                        <input
                          type="color"
                          id="bg-color"
                          name="bg-color"
                          value="#FFFFFF"
                          class="w-12 h-12 rounded-lg border-2 border-gray-600 cursor-pointer hover:border-purple-400 transition-colors flex-shrink-0"
                        />
                        <span
                          id="bg-color-value"
                          class="text-gray-300 font-mono text-sm">#FFFFFF</span
                        >
                      </div>
                    </div>
                  </div>

                  <!-- Option fond transparent -->
                  <div class="mt-6">
                    <label
                      class="flex items-start sm:items-center cursor-pointer group"
                    >
                      <input
                        type="checkbox"
                        id="transparent-bg"
                        name="transparent-bg"
                        class="sr-only"
                      />
                      <div class="relative flex-shrink-0">
                        <div
                          class="w-6 h-6 bg-gray-600 rounded border-2 border-gray-500 group-hover:border-purple-400 transition-colors"
                        >
                        </div>
                        <div
                          class="absolute inset-0 w-6 h-6 bg-gradient-to-r from-purple-500 to-pink-500 rounded opacity-0 transition-opacity duration-200"
                          id="checkbox-bg"
                        >
                        </div>
                        <svg
                          class="absolute inset-0 w-6 h-6 text-white opacity-0 transition-opacity duration-200"
                          id="checkbox-check"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="3"
                            d="M5 13l4 4L19 7"></path>
                        </svg>
                      </div>
                      <span
                        class="ml-3 text-gray-300 font-medium group-hover:text-white transition-colors text-sm sm:text-base"
                      >
                        üîç Fond transparent (pour affiches)
                      </span>
                    </label>
                  </div>

                  <!-- Aper√ßu des couleurs -->
                  <div class="mt-6 p-4 bg-gray-800/50 rounded-lg">
                    <p class="text-xs text-gray-400 mb-3">
                      Aper√ßu des couleurs :
                    </p>
                    <div class="flex items-center gap-4 flex-wrap">
                      <div
                        id="color-preview"
                        class="w-16 h-16 rounded-lg border-2 border-gray-600 flex items-center justify-center text-xs font-bold flex-shrink-0"
                        style="background-color: #FFFFFF; color: #000000;"
                      >
                        QR
                      </div>
                      <div class="text-xs text-gray-400 space-y-1">
                        <div>
                          QR: <span id="preview-qr-color">#000000</span>
                        </div>
                        <div>
                          Fond: <span id="preview-bg-color">#FFFFFF</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Onglet Cr√©ativit√© -->
              <div
                id="content-creative"
                class="tab-content hidden"
                style="display: none;"
              >
                <div
                  class="p-4 sm:p-6 bg-gradient-to-r from-pink-900/30 to-rose-900/30 rounded-xl border border-pink-500/30"
                >
                  <h3
                    class="text-lg sm:text-xl font-bold text-white mb-6 flex items-center flex-wrap gap-2"
                  >
                    <svg
                      class="w-5 h-5 text-pink-400 flex-shrink-0"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
                      ></path>
                    </svg>
                    <span>‚ú® Options Cr√©atives</span>
                  </h3>

                  <div class="grid sm:grid-cols-2 gap-6">
                    <!-- Style du QR Code -->
                    <div class="group">
                      <label
                        for="qr-style"
                        class="block text-sm font-semibold text-gray-300 mb-3"
                      >
                        Style du QR Code
                      </label>
                      <div class="custom-select-wrapper">
                        <select
                          id="qr-style"
                          name="qr-style"
                          class="custom-select w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-xl text-white focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all duration-300 appearance-none cursor-pointer"
                        >
                          <option value="square">üî≤ Carr√©s classiques</option>
                          <option value="rounded">üîò Carr√©s arrondis</option>
                          <option value="dots">‚ö´ Points circulaires</option>
                          <option value="hexagon">‚¨° Hexagones</option>
                        </select>
                        <div class="custom-select-arrow">
                          <svg
                            class="w-5 h-5 text-gray-400"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M19 9l-7 7-7-7"></path>
                          </svg>
                        </div>
                      </div>
                      <p class="text-xs text-amber-400 mt-1">
                        ‚ö†Ô∏è Styles avanc√©s en d√©veloppement
                      </p>
                    </div>

                    <!-- Taille du QR Code -->
                    <div class="group">
                      <label
                        for="qr-size"
                        class="block text-sm font-semibold text-gray-300 mb-3"
                      >
                        Taille d'export
                      </label>
                      <div class="custom-select-wrapper">
                        <select
                          id="qr-size"
                          name="qr-size"
                          class="custom-select w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-xl text-white focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all duration-300 appearance-none cursor-pointer"
                        >
                          <option value="150">üì± Petit - 150x150px</option>
                          <option value="300" selected
                            >üíª Standard - 300x300px</option
                          >
                          <option value="600">üñ•Ô∏è Grand - 600x600px</option>
                          <option value="1200">üñ®Ô∏è Print HD - 1200x1200px</option
                          >
                        </select>
                        <div class="custom-select-arrow">
                          <svg
                            class="w-5 h-5 text-gray-400"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M19 9l-7 7-7-7"></path>
                          </svg>
                        </div>
                      </div>
                    </div>

                    <!-- Format d'export -->
                    <div class="group">
                      <label
                        for="export-format"
                        class="block text-sm font-semibold text-gray-300 mb-3"
                      >
                        Format d'export
                      </label>
                      <div class="custom-select-wrapper">
                        <select
                          id="export-format"
                          name="export-format"
                          class="custom-select w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-xl text-white focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all duration-300 appearance-none cursor-pointer"
                        >
                          <option value="png" selected
                            >üñºÔ∏è PNG (Recommand√©)</option
                          >
                          <option value="svg">üìê SVG (Vectoriel)</option>
                          <option value="jpeg">üì∑ JPEG (Photo)</option>
                        </select>
                        <div class="custom-select-arrow">
                          <svg
                            class="w-5 h-5 text-gray-400"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M19 9l-7 7-7-7"></path>
                          </svg>
                        </div>
                      </div>
                    </div>

                    <!-- Niveau de correction d'erreur -->
                    <div class="group">
                      <label
                        for="error-correction"
                        class="block text-sm font-semibold text-gray-300 mb-3"
                      >
                        R√©sistance aux dommages
                      </label>
                      <div class="custom-select-wrapper">
                        <select
                          id="error-correction"
                          name="error-correction"
                          class="custom-select w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-xl text-white focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all duration-300 appearance-none cursor-pointer"
                        >
                          <option value="L">üî¥ Faible (7% r√©cup√©ration)</option>
                          <option value="M" selected
                            >üü° Moyen (15% r√©cup√©ration)</option
                          >
                          <option value="Q">üü† √âlev√© (25% r√©cup√©ration)</option>
                          <option value="H"
                            >üü¢ Maximum (30% r√©cup√©ration)</option
                          >
                        </select>
                        <div class="custom-select-arrow">
                          <svg
                            class="w-5 h-5 text-gray-400"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M19 9l-7 7-7-7"></path>
                          </svg>
                        </div>
                      </div>
                      <p class="text-xs text-gray-400 mt-1">
                        Plus √©lev√© = QR code plus r√©sistant mais plus dense
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Onglet Productivit√© -->
              <div id="content-productivity" class="tab-content hidden">
                <div
                  class="p-4 sm:p-6 bg-gradient-to-r from-emerald-900/30 to-teal-900/30 rounded-xl border border-emerald-500/30"
                >
                  <h3
                    class="text-lg sm:text-xl font-bold text-white mb-4 flex items-center flex-wrap gap-2"
                  >
                    <svg
                      class="w-5 h-5 text-emerald-400 flex-shrink-0"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                    </svg>
                    <span>‚ö° Productivit√©</span>
                    <span
                      class="text-xs bg-gradient-to-r from-emerald-500 to-teal-500 text-white px-2 py-1 rounded-full"
                    >
                      üöÄ Nouveau
                    </span>
                  </h3>

                  <div class="space-y-6">
                    <!-- Templates pr√©d√©finis -->
                    <div class="group">
                      <label
                        for="template-select"
                        class="block text-sm font-semibold text-gray-300 mb-3"
                      >
                        Templates pr√©d√©finis
                      </label>
                      <select
                        id="template-select"
                        name="template-select"
                        class="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-xl text-white focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-300"
                      >
                        <option value="">üéØ S√©lectionner un template...</option>
                        <option value="invoice">üßæ Facture (50‚Ç¨)</option>
                        <option value="donation">üíù Donation (10‚Ç¨)</option>
                        <option value="rent">üè† Loyer (800‚Ç¨)</option>
                        <option value="utilities"
                          >‚ö° Facture √©nergie (120‚Ç¨)</option
                        >
                        <option value="subscription">üì± Abonnement (15‚Ç¨)</option
                        >
                        <option value="freelance"
                          >üíº Prestation freelance (250‚Ç¨)</option
                        >
                      </select>
                    </div>

                    <!-- Historique des QR codes -->
                    <div class="group">
                      <div class="flex items-center justify-between mb-3">
                        <label
                          class="block text-sm font-semibold text-gray-300"
                        >
                          Historique r√©cent
                        </label>
                        <button
                          type="button"
                          id="clear-history-btn"
                          class="text-xs text-red-400 hover:text-red-300 transition-colors"
                        >
                          üóëÔ∏è Vider
                        </button>
                      </div>
                      <div
                        id="history-container"
                        class="space-y-2 max-h-32 overflow-y-auto"
                      >
                        <p class="text-xs text-gray-500 italic">
                          Aucun QR code g√©n√©r√© r√©cemment
                        </p>
                      </div>
                    </div>

                    <!-- Actions rapides -->
                    <div class="grid grid-cols-2 gap-3">
                      <button
                        type="button"
                        id="export-settings-btn"
                        class="flex items-center justify-center gap-2 px-4 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-indigo-700 transition-all duration-300 text-sm"
                      >
                        <span>üì§</span>
                        <span>Exporter config</span>
                      </button>

                      <button
                        type="button"
                        id="import-settings-btn"
                        class="flex items-center justify-center gap-2 px-4 py-3 bg-gradient-to-r from-purple-600 to-violet-600 text-white rounded-xl font-semibold hover:from-purple-700 hover:to-violet-700 transition-all duration-300 text-sm"
                      >
                        <span>üì•</span>
                        <span>Importer config</span>
                      </button>
                    </div>

                    <!-- Input cach√© pour l'import -->
                    <input
                      type="file"
                      id="import-file-input"
                      accept=".json"
                      class="hidden"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- Zone d'affichage du QR Code -->
    <div
      class="space-y-6 lg:space-y-8 animate-slide-in-right order-2 xl:order-2"
    >
      <div
        class="bg-gradient-to-br from-gray-800/80 to-gray-900/80 backdrop-blur-xl p-6 lg:p-8 rounded-3xl border border-gray-700/50 shadow-2xl min-h-[400px] lg:min-h-[500px] flex flex-col items-center justify-center"
      >
        <div
          id="qr-container"
          class="hidden text-center space-y-4 lg:space-y-6 animate-fade-in w-full"
        >
          <div
            class="bg-white/10 backdrop-blur-sm rounded-2xl p-4 sm:p-6 lg:p-8 border border-white/20"
          >
            <h3
              class="text-xl sm:text-2xl font-bold text-white mb-4 lg:mb-6 flex items-center justify-center gap-2 flex-wrap"
            >
              <span class="text-xl sm:text-2xl">üì±</span>
              <span>Votre QR Code de Paiement</span>
              <span
                class="text-xs bg-purple-500/30 text-purple-200 px-2 py-1 rounded-full border border-purple-400/30"
              >
                ‚ö° Temps r√©el
              </span>
            </h3>
            <div class="bg-white p-3 sm:p-4 rounded-xl mx-auto inline-block">
              <img
                id="qr-image"
                alt="QR Code de paiement"
                class="mx-auto rounded-lg shadow-2xl max-w-full h-auto"
              />
            </div>
            <p class="text-purple-200 mt-3 sm:mt-4 text-sm">
              Scannez ce code avec votre application bancaire
            </p>
          </div>

          <!-- D√©tails du paiement -->
          <div
            id="payment-details"
            class="p-4 sm:p-6 bg-gradient-to-r from-blue-900/50 to-purple-900/50 rounded-2xl border border-blue-500/30 animate-slide-up"
          >
            <h4
              class="font-bold text-white mb-4 flex items-center text-sm sm:text-base"
            >
              <svg
                class="w-4 h-4 sm:w-5 sm:h-5 mr-2 text-blue-400 flex-shrink-0"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                ></path>
              </svg>
              D√©tails du paiement
            </h4>
            <div class="text-xs sm:text-sm text-gray-300 space-y-2">
              <div
                class="flex flex-col sm:flex-row sm:justify-between sm:items-center p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-0"
              >
                <strong class="text-blue-400">IBAN :</strong>
                <span
                  id="display-iban"
                  class="font-mono break-all sm:break-normal"></span>
              </div>
              <div
                class="flex flex-col sm:flex-row sm:justify-between sm:items-center p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-0"
              >
                <strong class="text-green-400">Montant :</strong>
                <div class="flex items-center gap-1">
                  <span id="display-amount"></span> ‚Ç¨
                </div>
              </div>
              <div id="display-communication-container" class="hidden">
                <div
                  class="flex flex-col sm:flex-row sm:justify-between sm:items-start p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-2"
                >
                  <strong class="text-purple-400 flex-shrink-0"
                    >Communication :</strong
                  >
                  <span id="display-communication" class="break-words"></span>
                </div>
              </div>
              <div id="display-beneficiary-container" class="hidden">
                <div
                  class="flex flex-col sm:flex-row sm:justify-between sm:items-center p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-0"
                >
                  <strong class="text-pink-400">B√©n√©ficiaire :</strong>
                  <span id="display-beneficiary" class="break-words"></span>
                </div>
              </div>
            </div>
          </div>

          <!-- Bouton de t√©l√©chargement -->
          <button
            id="download-btn"
            class="w-full bg-gradient-to-r from-green-600 to-emerald-600 text-white py-3 px-4 sm:px-6 rounded-xl font-semibold hover:from-green-700 hover:to-emerald-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-green-500/25 text-sm sm:text-base"
          >
            <span class="flex items-center justify-center gap-2">
              <span>üì•</span>
              <span>T√©l√©charger le QR Code</span>
            </span>
          </button>
        </div>

        <div id="placeholder" class="text-center animate-pulse">
          <div
            class="w-24 h-24 sm:w-32 sm:h-32 bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-full mx-auto mb-4 sm:mb-6 flex items-center justify-center float-animation"
          >
            <svg
              class="w-12 h-12 sm:w-16 sm:h-16 text-purple-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="1.5"
                d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"
              ></path>
            </svg>
          </div>
          <h3 class="text-xl sm:text-2xl font-semibold text-gray-400 mb-3">
            ‚ú® QR Code de Paiement
          </h3>
          <p class="text-gray-500 max-w-sm mx-auto text-sm sm:text-base px-4">
            Remplissez le formulaire pour g√©n√©rer votre QR code √©l√©gant
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Fonction d'animation personnalis√©e (remplace animatejs)
  function animateElement(
    element: Element | string,
    keyframes: any,
    options: any = {}
  ) {
    const el =
      typeof element === "string" ? document.querySelector(element) : element;
    if (!el) return;

    const animation = (el as Element).animate(keyframes, {
      duration: options.duration || 300,
      easing: options.easing || "ease",
      delay: options.delay || 0,
      fill: "forwards",
    });

    if (options.complete) {
      animation.addEventListener("finish", options.complete);
    }

    return animation;
  }

  // Script inline pour QR Code generation (sans d√©pendance externe)
  function generateQRCode(text: string, size: number = 300): string {
    // Utilisation de l'API QR Server (service gratuit)
    const encodedText = encodeURIComponent(text);
    return `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodedText}&format=png&margin=10`;
  }

  // Attendre que le DOM soit charg√©
  document.addEventListener("DOMContentLoaded", () => {
    // Animations d'entr√©e
    setTimeout(() => {
      animateElement(
        ".animate-fade-in",
        [
          { opacity: 0, transform: "translateY(30px)" },
          { opacity: 1, transform: "translateY(0px)" },
        ],
        {
          duration: 800,
          easing: "ease-out",
        }
      );
    }, 100);

    setTimeout(() => {
      animateElement(
        ".animate-slide-in-left",
        [
          { opacity: 0, transform: "translateX(-50px)" },
          { opacity: 1, transform: "translateX(0px)" },
        ],
        {
          duration: 1000,
          easing: "ease-out",
        }
      );
    }, 300);

    setTimeout(() => {
      animateElement(
        ".animate-slide-in-right",
        [
          { opacity: 0, transform: "translateX(50px)" },
          { opacity: 1, transform: "translateX(0px)" },
        ],
        {
          duration: 1000,
          easing: "ease-out",
        }
      );
    }, 500);

    const form = document.getElementById("payment-form") as HTMLFormElement;
    const qrContainer = document.getElementById("qr-container") as HTMLElement;
    const placeholder = document.getElementById("placeholder") as HTMLElement;
    const qrImage = document.getElementById("qr-image") as HTMLImageElement;
    const downloadBtn = document.getElementById(
      "download-btn"
    ) as HTMLButtonElement;
    const resetBtn = document.getElementById("reset-btn") as HTMLButtonElement;
    const saveDefaultsBtn = document.getElementById(
      "save-defaults-btn"
    ) as HTMLButtonElement;
    const saveIndicator = document.getElementById(
      "save-indicator"
    ) as HTMLElement;

    // √âl√©ments d'affichage des d√©tails
    const displayIban = document.getElementById("display-iban") as HTMLElement;
    const displayAmount = document.getElementById(
      "display-amount"
    ) as HTMLElement;
    const displayCommunication = document.getElementById(
      "display-communication"
    ) as HTMLElement;
    const displayCommunicationContainer = document.getElementById(
      "display-communication-container"
    ) as HTMLElement;
    const displayBeneficiary = document.getElementById(
      "display-beneficiary"
    ) as HTMLElement;
    const displayBeneficiaryContainer = document.getElementById(
      "display-beneficiary-container"
    ) as HTMLElement;

    // √âl√©ments du formulaire
    const amountInput = document.getElementById("amount") as HTMLInputElement;
    const communicationInput = document.getElementById(
      "communication"
    ) as HTMLTextAreaElement;
    const beneficiaryInput = document.getElementById(
      "beneficiary"
    ) as HTMLInputElement;

    // √âl√©ments de personnalisation des couleurs
    const qrColorInput = document.getElementById(
      "qr-color"
    ) as HTMLInputElement;
    const bgColorInput = document.getElementById(
      "bg-color"
    ) as HTMLInputElement;
    const transparentBgInput = document.getElementById(
      "transparent-bg"
    ) as HTMLInputElement;
    const qrColorValue = document.getElementById(
      "qr-color-value"
    ) as HTMLElement;
    const bgColorValue = document.getElementById(
      "bg-color-value"
    ) as HTMLElement;
    const colorPreview = document.getElementById(
      "color-preview"
    ) as HTMLElement;
    const previewQrColor = document.getElementById(
      "preview-qr-color"
    ) as HTMLElement;
    const previewBgColor = document.getElementById(
      "preview-bg-color"
    ) as HTMLElement;
    const checkboxBg = document.getElementById("checkbox-bg") as HTMLElement;
    const checkboxCheck = document.getElementById(
      "checkbox-check"
    ) as HTMLElement;

    // Nouveaux √©l√©ments pour les fonctionnalit√©s avanc√©es
    const qrStyleSelect = document.getElementById(
      "qr-style"
    ) as HTMLSelectElement;
    const qrSizeSelect = document.getElementById(
      "qr-size"
    ) as HTMLSelectElement;
    const exportFormatSelect = document.getElementById(
      "export-format"
    ) as HTMLSelectElement;
    const errorCorrectionSelect = document.getElementById(
      "error-correction"
    ) as HTMLSelectElement;
    const templateSelect = document.getElementById(
      "template-select"
    ) as HTMLSelectElement;
    const historyContainer = document.getElementById(
      "history-container"
    ) as HTMLElement;
    const clearHistoryBtn = document.getElementById(
      "clear-history-btn"
    ) as HTMLButtonElement;
    const exportSettingsBtn = document.getElementById(
      "export-settings-btn"
    ) as HTMLButtonElement;
    const importSettingsBtn = document.getElementById(
      "import-settings-btn"
    ) as HTMLButtonElement;
    const importFileInput = document.getElementById(
      "import-file-input"
    ) as HTMLInputElement;

    if (!form) {
      console.error("Formulaire non trouv√©");
      return;
    }

    // Charger les valeurs par d√©faut au d√©marrage
    loadDefaults();
    loadFromURL();
    setupColorHandlers();
    setupAdvancedFeatures();
    // setupCreativeHandlers(); // D√©sactiv√© temporairement
    setupTabs();
    loadHistory();

    // Fonction pour charger les valeurs par d√©faut
    function loadDefaults() {
      try {
        const savedDefaults = localStorage.getItem("qr-payment-defaults");
        if (savedDefaults) {
          const defaults = JSON.parse(savedDefaults);
          console.log("Chargement des valeurs par d√©faut:", defaults);

          if (defaults.amount && amountInput) {
            amountInput.value = defaults.amount;
          }
          if (defaults.communication && communicationInput) {
            communicationInput.value = defaults.communication;
          }
          if (defaults.beneficiary && beneficiaryInput) {
            beneficiaryInput.value = defaults.beneficiary;
          }
        }
      } catch (error) {
        console.error(
          "Erreur lors du chargement des valeurs par d√©faut:",
          error
        );
      }
    }

    // Fonction pour charger les donn√©es depuis l'URL
    function loadFromURL() {
      try {
        const urlParams = new URLSearchParams(window.location.search);
        const iban = urlParams.get("iban");
        const amount = urlParams.get("amount");
        const communication = urlParams.get("communication");
        const beneficiary = urlParams.get("beneficiary");

        if (iban || amount || communication || beneficiary) {
          console.log("Chargement des donn√©es depuis l'URL:", {
            iban,
            amount,
            communication,
            beneficiary,
          });

          if (iban && document.getElementById("iban")) {
            (document.getElementById("iban") as HTMLInputElement).value = iban;
          }
          if (amount && amountInput) {
            amountInput.value = amount;
          }
          if (communication && communicationInput) {
            communicationInput.value = communication;
          }
          if (beneficiary && beneficiaryInput) {
            beneficiaryInput.value = beneficiary;
          }

          // Nettoyer l'URL apr√®s chargement
          window.history.replaceState(
            {},
            document.title,
            window.location.pathname
          );
        }
      } catch (error) {
        console.error("Erreur lors du chargement depuis l'URL:", error);
      }
    }

    // Fonction pour configurer les fonctionnalit√©s avanc√©es
    function setupAdvancedFeatures() {
      // Templates pr√©d√©finis
      const templates = {
        invoice: {
          amount: "50.00",
          communication: "Facture #2024-001 - Services professionnels",
          beneficiary: "Entreprise Services Pro",
        },
        donation: {
          amount: "10.00",
          communication: "Don pour association caritative",
          beneficiary: "Association Aide Humanitaire",
        },
        rent: {
          amount: "800.00",
          communication: "Loyer mensuel - Appartement Rue de la Paix",
          beneficiary: "Agence Immobili√®re Central",
        },
        utilities: {
          amount: "120.00",
          communication: "Facture √©lectricit√©/gaz - P√©riode janvier 2024",
          beneficiary: "Fournisseur √ânergie Plus",
        },
        subscription: {
          amount: "15.00",
          communication: "Abonnement mensuel - Service Premium",
          beneficiary: "Plateforme Digitale",
        },
        freelance: {
          amount: "250.00",
          communication: "Prestation d√©veloppement web - Projet XYZ",
          beneficiary: "Freelance D√©veloppeur",
        },
      };

      // Gestionnaire de templates
      templateSelect?.addEventListener("change", (e) => {
        const templateKey = (e.target as HTMLSelectElement).value;
        if (templateKey && templates[templateKey as keyof typeof templates]) {
          const template = templates[templateKey as keyof typeof templates];

          if (amountInput) amountInput.value = template.amount;
          if (communicationInput)
            communicationInput.value = template.communication;
          if (beneficiaryInput) beneficiaryInput.value = template.beneficiary;

          // Animation de remplissage
          animateElement(
            form,
            [
              { transform: "scale(1)" },
              { transform: "scale(1.02)" },
              { transform: "scale(1)" },
            ],
            {
              duration: 300,
            }
          );

          console.log("Template appliqu√©:", templateKey);
        }
      });

      // Export des param√®tres
      exportSettingsBtn?.addEventListener("click", () => {
        try {
          const settings = {
            qrColor: qrColorInput?.value || "#000000",
            bgColor: bgColorInput?.value || "#FFFFFF",
            transparent: transparentBgInput?.checked || false,
            style: qrStyleSelect?.value || "square",
            size: qrSizeSelect?.value || "300",
            format: exportFormatSelect?.value || "png",
            errorCorrection: errorCorrectionSelect?.value || "M",
            exportDate: new Date().toISOString(),
          };

          const blob = new Blob([JSON.stringify(settings, null, 2)], {
            type: "application/json",
          });
          const url = URL.createObjectURL(blob);
          const link = document.createElement("a");
          link.href = url;
          link.download = `qr-generator-config-${new Date().toISOString().slice(0, 10)}.json`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(url);

          console.log("Configuration export√©e");
        } catch (error) {
          console.error("Erreur lors de l'export:", error);
          alert("Erreur lors de l'export de la configuration");
        }
      });

      // Import des param√®tres
      importSettingsBtn?.addEventListener("click", () => {
        importFileInput?.click();
      });

      importFileInput?.addEventListener("change", (e) => {
        const file = (e.target as HTMLInputElement).files?.[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (event) => {
            try {
              const settings = JSON.parse(event.target?.result as string);

              // Appliquer les param√®tres
              if (qrColorInput && settings.qrColor)
                qrColorInput.value = settings.qrColor;
              if (bgColorInput && settings.bgColor)
                bgColorInput.value = settings.bgColor;
              if (
                transparentBgInput &&
                typeof settings.transparent === "boolean"
              )
                transparentBgInput.checked = settings.transparent;
              if (qrStyleSelect && settings.style)
                qrStyleSelect.value = settings.style;
              if (qrSizeSelect && settings.size)
                qrSizeSelect.value = settings.size;
              if (exportFormatSelect && settings.format)
                exportFormatSelect.value = settings.format;
              if (errorCorrectionSelect && settings.errorCorrection)
                errorCorrectionSelect.value = settings.errorCorrection;

              // Mettre √† jour l'aper√ßu
              updateColorPreview();

              console.log("Configuration import√©e");
              alert("Configuration import√©e avec succ√®s !");
            } catch (error) {
              console.error("Erreur lors de l'import:", error);
              alert("Erreur lors de l'import de la configuration");
            }
          };
          reader.readAsText(file);
        }
      });

      // Vider l'historique
      clearHistoryBtn?.addEventListener("click", () => {
        if (confirm("√ätes-vous s√ªr de vouloir vider l'historique ?")) {
          localStorage.removeItem("qr-payment-history");
          loadHistory();
          console.log("Historique vid√©");
        }
      });
    }

    // Fonction pour charger l'historique
    function loadHistory() {
      try {
        const history = JSON.parse(
          localStorage.getItem("qr-payment-history") || "[]"
        );

        if (historyContainer) {
          if (history.length === 0) {
            historyContainer.innerHTML =
              '<p class="text-xs text-gray-500 italic">Aucun QR code g√©n√©r√© r√©cemment</p>';
          } else {
            historyContainer.innerHTML = history
              .slice(0, 5)
              .map(
                (item: any, index: number) => `
              <div class="flex items-center justify-between p-2 bg-gray-800/30 rounded-lg cursor-pointer hover:bg-gray-700/30 transition-colors" data-history-index="${index}">
                <div class="flex-1 min-w-0">
                  <p class="text-xs text-white font-medium truncate">${item.amount}‚Ç¨ - ${item.communication}</p>
                  <p class="text-xs text-gray-400">${new Date(item.date).toLocaleDateString()}</p>
                </div>
                <button class="text-xs text-emerald-400 hover:text-emerald-300 ml-2 flex-shrink-0">
                  üìã Utiliser
                </button>
              </div>
            `
              )
              .join("");

            // Ajouter les gestionnaires d'√©v√©nements pour l'historique
            historyContainer
              .querySelectorAll("[data-history-index]")
              .forEach((item, index) => {
                item.addEventListener("click", () => {
                  const historyItem = history[index];
                  if (historyItem) {
                    if (amountInput) amountInput.value = historyItem.amount;
                    if (communicationInput)
                      communicationInput.value = historyItem.communication;
                    if (beneficiaryInput)
                      beneficiaryInput.value = historyItem.beneficiary;

                    // Animation
                    animateElement(
                      form,
                      [
                        { transform: "scale(1)" },
                        { transform: "scale(1.02)" },
                        { transform: "scale(1)" },
                      ],
                      {
                        duration: 300,
                      }
                    );

                    console.log("Historique appliqu√©:", historyItem);
                  }
                });
              });
          }
        }
      } catch (error) {
        console.error("Erreur lors du chargement de l'historique:", error);
      }
    }

    // Fonction pour ajouter √† l'historique
    function addToHistory(
      iban: string,
      amount: string,
      communication: string,
      beneficiary: string
    ) {
      try {
        const history = JSON.parse(
          localStorage.getItem("qr-payment-history") || "[]"
        );
        const newItem = {
          iban,
          amount,
          communication,
          beneficiary,
          date: new Date().toISOString(),
        };

        // √âviter les doublons
        const exists = history.some(
          (item: any) =>
            item.iban === iban &&
            item.amount === amount &&
            item.communication === communication
        );

        if (!exists) {
          history.unshift(newItem);
          // Garder seulement les 10 derniers
          if (history.length > 10) {
            history.splice(10);
          }

          localStorage.setItem("qr-payment-history", JSON.stringify(history));
          loadHistory();
        }
      } catch (error) {
        console.error("Erreur lors de l'ajout √† l'historique:", error);
      }
    }

    // Fonction pour sauvegarder les valeurs par d√©faut
    function saveDefaults() {
      try {
        const defaults = {
          amount: amountInput?.value || "",
          communication: communicationInput?.value || "",
          beneficiary: beneficiaryInput?.value || "",
        };

        localStorage.setItem("qr-payment-defaults", JSON.stringify(defaults));
        console.log("Valeurs par d√©faut sauvegard√©es:", defaults);

        // Afficher l'indicateur de sauvegarde
        saveIndicator.classList.remove("hidden");
        animateElement(
          saveIndicator,
          [
            { opacity: 0, transform: "translateY(-10px)" },
            { opacity: 1, transform: "translateY(0px)" },
          ],
          {
            duration: 300,
          }
        );

        // Masquer l'indicateur apr√®s 3 secondes
        setTimeout(() => {
          animateElement(
            saveIndicator,
            [
              { opacity: 1, transform: "translateY(0px)" },
              { opacity: 0, transform: "translateY(-10px)" },
            ],
            {
              duration: 300,
              complete: () => {
                saveIndicator.classList.add("hidden");
              },
            }
          );
        }, 3000);
      } catch (error) {
        console.error("Erreur lors de la sauvegarde:", error);
        alert("Erreur lors de la sauvegarde des valeurs par d√©faut");
      }
    }

    // Fonction pour reset le formulaire
    function resetForm() {
      form.reset();

      // Masquer le QR code et afficher le placeholder
      qrContainer.classList.add("hidden");
      placeholder.classList.remove("hidden");

      // Animation de reset
      animateElement(
        form,
        [
          { transform: "scale(1)" },
          { transform: "scale(0.98)" },
          { transform: "scale(1)" },
        ],
        {
          duration: 300,
        }
      );

      console.log("Formulaire r√©initialis√©");
    }

    // Fonction pour configurer les gestionnaires de couleurs
    function setupColorHandlers() {
      // Gestionnaire pour la couleur du QR code
      qrColorInput?.addEventListener("input", (e) => {
        const color = (e.target as HTMLInputElement).value;
        qrColorValue.textContent = color;
        previewQrColor.textContent = color;
        updateColorPreview();
        updateQRCodeColors(); // R√©g√©n√©ration avec nouvelles couleurs
      });

      // Gestionnaire pour la couleur du fond
      bgColorInput?.addEventListener("input", (e) => {
        const color = (e.target as HTMLInputElement).value;
        bgColorValue.textContent = color;
        previewBgColor.textContent = color;
        updateColorPreview();
        updateQRCodeColors(); // R√©g√©n√©ration avec nouvelles couleurs
      });

      // Gestionnaire pour le fond transparent
      transparentBgInput?.addEventListener("change", (e) => {
        const isChecked = (e.target as HTMLInputElement).checked;

        if (isChecked) {
          checkboxBg.style.opacity = "1";
          checkboxCheck.style.opacity = "1";
          bgColorInput.disabled = true;
          bgColorInput.style.opacity = "0.5";
        } else {
          checkboxBg.style.opacity = "0";
          checkboxCheck.style.opacity = "0";
          bgColorInput.disabled = false;
          bgColorInput.style.opacity = "1";
        }

        updateColorPreview();
        updateQRCodeColors(); // R√©g√©n√©ration avec nouvelles couleurs
      });
    }

    // Fonction pour configurer les gestionnaires des options cr√©atives
    function setupCreativeHandlers() {
      // Gestionnaire pour le style du QR code
      qrStyleSelect?.addEventListener("change", () => {
        console.log("Style QR code chang√©:", qrStyleSelect.value);
        updateQRCodeColors(); // R√©g√©n√©ration avec nouveau style
      });

      // Gestionnaire pour la taille du QR code
      qrSizeSelect?.addEventListener("change", () => {
        console.log("Taille QR code chang√©e:", qrSizeSelect.value);
        updateQRCodeColors(); // R√©g√©n√©ration avec nouvelle taille
      });

      // Gestionnaire pour le format d'export
      exportFormatSelect?.addEventListener("change", () => {
        console.log("Format d'export chang√©:", exportFormatSelect.value);
        updateQRCodeColors(); // R√©g√©n√©ration avec nouveau format
      });

      // Gestionnaire pour le niveau de correction d'erreur
      errorCorrectionSelect?.addEventListener("change", () => {
        console.log(
          "Niveau de correction chang√©:",
          errorCorrectionSelect.value
        );
        updateQRCodeColors(); // R√©g√©n√©ration avec nouveau niveau
      });
    }

    // Fonction pour mettre √† jour le QR code affich√© en temps r√©el
    async function updateQRCodeColors() {
      // V√©rifier si un QR code est actuellement affich√©
      if (!qrContainer.classList.contains("hidden") && qrImage.src) {
        // R√©cup√©rer les donn√©es du QR code depuis le formulaire
        const formData = new FormData(form);
        const iban = formData.get("iban") as string;
        const amount = formData.get("amount") as string;
        const communication = formData.get("communication") as string;
        const beneficiary = formData.get("beneficiary") as string;

        if (iban && amount && communication) {
          const ibanClean = iban.replace(/\s/g, "");
          const qrData = `BCD
002
1
SCT

${beneficiary || ""}
${ibanClean}
EUR${amount}


${communication || ""}`;

          // G√©n√©rer le nouveau QR code avec les couleurs mises √† jour
          const newQrCodeUrl = await generateQRCodeWithColors(qrData, 300);

          // Mettre √† jour l'image avec une animation fluide
          qrImage.style.opacity = "0.7";
          qrImage.style.transition = "opacity 0.3s ease";

          setTimeout(() => {
            qrImage.src = newQrCodeUrl;
            qrImage.onload = () => {
              qrImage.style.opacity = "1";
              // Mettre √† jour l'affichage avec le motif damier si n√©cessaire
              updateQRCodeDisplay();
            };
          }, 150);

          console.log("QR Code mis √† jour avec nouvelles couleurs");
        }
      }
    }

    // Fonction pour mettre √† jour l'aper√ßu des couleurs
    function updateColorPreview() {
      const qrColor = qrColorInput?.value || "#000000";
      const bgColor = transparentBgInput?.checked
        ? "transparent"
        : bgColorInput?.value || "#FFFFFF";

      if (colorPreview) {
        colorPreview.style.backgroundColor =
          bgColor === "transparent" ? "rgba(0,0,0,0)" : bgColor;
        colorPreview.style.color = qrColor;

        if (bgColor === "transparent") {
          // Motif damier pour fond transparent
          colorPreview.style.backgroundImage =
            "linear-gradient(45deg, #ccc 25%, transparent 25%), linear-gradient(-45deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%), linear-gradient(-45deg, transparent 75%, #ccc 75%)";
          colorPreview.style.backgroundSize = "8px 8px";
          colorPreview.style.backgroundPosition =
            "0 0, 0 4px, 4px -4px, -4px 0px";
          previewBgColor.textContent = "Transparent";
        } else {
          colorPreview.style.backgroundImage = "none";
          previewBgColor.textContent = bgColor;
        }
      }

      // Mettre √† jour l'affichage du QR code si il est visible
      updateQRCodeDisplay();
    }

    // Nouvelle fonction pour mettre √† jour l'affichage du QR code avec gestion du contraste
    function updateQRCodeDisplay() {
      if (!qrContainer.classList.contains("hidden") && qrImage.src) {
        const qrColor = qrColorInput?.value || "#000000";
        const isTransparent = transparentBgInput?.checked || false;
        const qrImageContainer = qrImage.parentElement;

        if (qrImageContainer) {
          if (isTransparent) {
            // Pour fond transparent, ajouter un motif damier en arri√®re-plan du conteneur
            qrImageContainer.style.backgroundImage =
              "linear-gradient(45deg, #f0f0f0 25%, transparent 25%), linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f0f0f0 75%), linear-gradient(-45deg, transparent 75%, #f0f0f0 75%)";
            qrImageContainer.style.backgroundSize = "12px 12px";
            qrImageContainer.style.backgroundPosition =
              "0 0, 0 6px, 6px -6px, -6px 0px";

            // Si le QR code est blanc ou tr√®s clair, ajouter un contour sombre
            const rgb = hexToRgb(qrColor);
            if (rgb && rgb.r > 200 && rgb.g > 200 && rgb.b > 200) {
              qrImage.style.filter = "drop-shadow(0 0 1px rgba(0,0,0,0.8))";
            } else {
              qrImage.style.filter = "none";
            }
          } else {
            // Fond normal, pas de motif damier
            qrImageContainer.style.backgroundImage = "none";
            qrImage.style.filter = "none";
          }
        }
      }
    }

    // Fonction utilitaire pour convertir hex en RGB
    function hexToRgb(hex: string): { r: number; g: number; b: number } | null {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
          }
        : null;
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      console.log("Formulaire soumis"); // Debug

      // Animation du bouton de soumission
      const submitBtn = form.querySelector(
        'button[type="submit"]'
      ) as HTMLElement;
      animateElement(
        submitBtn,
        [
          { transform: "scale(1)" },
          { transform: "scale(0.95)" },
          { transform: "scale(1)" },
        ],
        {
          duration: 200,
        }
      );

      const formData = new FormData(form);
      const iban = formData.get("iban") as string;
      const amount = formData.get("amount") as string;
      const communication = formData.get("communication") as string;
      const beneficiary = formData.get("beneficiary") as string;

      console.log("Donn√©es:", { iban, amount, communication, beneficiary }); // Debug

      // Validation des champs obligatoires
      if (!iban || !amount) {
        animateElement(
          form,
          [
            { transform: "translateX(0)" },
            { transform: "translateX(-10px)" },
            { transform: "translateX(10px)" },
            { transform: "translateX(0)" },
          ],
          {
            duration: 400,
          }
        );
        alert(
          "Veuillez remplir tous les champs obligatoires (IBAN et montant)"
        );
        return;
      }

      // Validation de l'IBAN belge
      const ibanClean = iban.replace(/\s/g, "");
      const belgianIbanRegex = /^BE[0-9]{14}$/;
      const belgianIbanWithSpacesRegex =
        /^BE[0-9]{2}\s[0-9]{4}\s[0-9]{4}\s[0-9]{4}$/;

      console.log("=== DEBUG VALIDATION IBAN ===");
      console.log("IBAN original:", iban);
      console.log("IBAN nettoy√©:", ibanClean);
      console.log("Longueur IBAN original:", iban.length);
      console.log("Longueur IBAN nettoy√©:", ibanClean.length);
      console.log("Test regex sans espaces:", belgianIbanRegex.test(ibanClean));
      console.log(
        "Test regex avec espaces:",
        belgianIbanWithSpacesRegex.test(iban)
      );
      console.log("Regex sans espaces:", belgianIbanRegex);
      console.log("Regex avec espaces:", belgianIbanWithSpacesRegex);

      if (
        !belgianIbanRegex.test(ibanClean) &&
        !belgianIbanWithSpacesRegex.test(iban)
      ) {
        console.log("‚ùå VALIDATION √âCHOU√âE");
        animateElement(
          form,
          [
            { transform: "translateX(0)" },
            { transform: "translateX(-10px)" },
            { transform: "translateX(10px)" },
            { transform: "translateX(0)" },
          ],
          {
            duration: 400,
          }
        );
        alert(
          "Veuillez entrer un IBAN belge valide (format: BE68 5390 0754 7034)"
        );
        return;
      }

      console.log("‚úÖ VALIDATION IBAN R√âUSSIE");

      // Validation du montant
      const amountNum = parseFloat(amount);
      if (isNaN(amountNum) || amountNum <= 0 || amountNum > 999999.99) {
        animateElement(
          form,
          [
            { transform: "translateX(0)" },
            { transform: "translateX(-10px)" },
            { transform: "translateX(10px)" },
            { transform: "translateX(0)" },
          ],
          {
            duration: 400,
          }
        );
        alert("Le montant doit √™tre compris entre 0.01‚Ç¨ et 999,999.99‚Ç¨");
        return;
      }

      // Validation de la communication (optionnelle)
      if (
        communication &&
        (communication.length < 3 || communication.length > 140)
      ) {
        animateElement(
          form,
          [
            { transform: "translateX(0)" },
            { transform: "translateX(-10px)" },
            { transform: "translateX(10px)" },
            { transform: "translateX(0)" },
          ],
          {
            duration: 400,
          }
        );
        alert(
          "La communication doit contenir entre 3 et 140 caract√®res si elle est renseign√©e"
        );
        return;
      }

      try {
        // Cr√©ation de la cha√Æne de donn√©es pour le QR code (format EPC)
        const qrData = `BCD
002
1
SCT

${beneficiary || ""}
${ibanClean}
EUR${amount}


${communication || ""}`;

        console.log("QR Data:", qrData); // Debug

        // G√©n√©ration du QR code via API
        const qrCodeUrl = await generateQRCodeWithColors(qrData, 300);

        // Animation de disparition du placeholder
        animateElement(
          placeholder,
          [
            { opacity: 1, transform: "scale(1)" },
            { opacity: 0, transform: "scale(0.8)" },
          ],
          {
            duration: 300,
            complete: () => {
              placeholder.classList.add("hidden");
              qrContainer.classList.remove("hidden");

              // Animation d'apparition du QR container
              animateElement(
                qrContainer,
                [
                  { opacity: 0, transform: "scale(0.8)" },
                  { opacity: 1, transform: "scale(1)" },
                ],
                {
                  duration: 500,
                  easing: "ease-out",
                }
              );
            },
          }
        );

        // Affichage du QR code
        qrImage.src = qrCodeUrl;
        qrImage.onload = () => {
          console.log("QR Code charg√© avec couleurs personnalis√©es"); // Debug

          // Mettre √† jour l'affichage avec le motif damier si n√©cessaire
          updateQRCodeDisplay();

          // Animation du QR code
          setTimeout(() => {
            animateElement(
              ".animate-zoom-in",
              [
                { transform: "scale(0)" },
                { transform: "scale(1.1)" },
                { transform: "scale(1)" },
              ],
              {
                duration: 600,
                easing: "ease-out",
              }
            );
          }, 100);

          // Animation des d√©tails
          setTimeout(() => {
            animateElement(
              ".animate-slide-up",
              [
                { opacity: 0, transform: "translateY(30px)" },
                { opacity: 1, transform: "translateY(0px)" },
              ],
              {
                duration: 400,
                easing: "ease-out",
              }
            );
          }, 400);
        };

        // Mise √† jour des d√©tails affich√©s
        displayIban.textContent = iban;
        displayAmount.textContent = amount;

        if (communication) {
          displayCommunication.textContent = communication;
          displayCommunicationContainer.classList.remove("hidden");
        } else {
          displayCommunicationContainer.classList.add("hidden");
        }

        if (beneficiary) {
          displayBeneficiary.textContent = beneficiary;
          displayBeneficiaryContainer.classList.remove("hidden");
        } else {
          displayBeneficiaryContainer.classList.add("hidden");
        }

        // Ajouter √† l'historique
        addToHistory(iban, amount, communication, beneficiary);
      } catch (error) {
        console.error("Erreur lors de la g√©n√©ration du QR code:", error);
        alert("Erreur lors de la g√©n√©ration du QR code");
      }
    });

    // Fonction de t√©l√©chargement avec animation
    downloadBtn.addEventListener("click", async () => {
      try {
        // Animation du bouton
        animateElement(
          downloadBtn,
          [
            { transform: "scale(1)" },
            { transform: "scale(0.95)" },
            { transform: "scale(1)" },
          ],
          {
            duration: 200,
          }
        );

        // R√©cup√©rer les donn√©es du formulaire
        const formData = new FormData(form);
        const iban = formData.get("iban") as string;
        const amount = formData.get("amount") as string;
        const communication = formData.get("communication") as string;
        const beneficiary = formData.get("beneficiary") as string;

        if (iban && amount) {
          const ibanClean = iban.replace(/\s/g, "");
          const qrData = `BCD
002
1
SCT

${beneficiary || ""}
${ibanClean}
EUR${amount}


${communication || ""}`;

          console.log("D√©but du t√©l√©chargement...");

          // G√©n√©rer le QR code avec les couleurs personnalis√©es pour le t√©l√©chargement
          const customQrCodeUrl = await generateQRCodeWithColors(qrData, 300);

          console.log("QR Code g√©n√©r√© pour t√©l√©chargement:", customQrCodeUrl);

          // Cr√©er un nom de fichier descriptif
          const isTransparent = transparentBgInput?.checked || false;
          const qrColor = (qrColorInput?.value || "#000000").replace("#", "");
          const timestamp = new Date()
            .toISOString()
            .slice(0, 19)
            .replace(/:/g, "-");
          const filename = `qr-payment-${amount}EUR-${isTransparent ? "transparent" : "colored"}-${timestamp}.png`;

          // T√©l√©charger le fichier
          if (customQrCodeUrl.startsWith("data:")) {
            // Si c'est une data URL (cas transparent), t√©l√©chargement direct
            const link = document.createElement("a");
            link.href = customQrCodeUrl;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            console.log("T√©l√©chargement direct (data URL) r√©ussi");
          } else {
            // Si c'est une URL externe, fetch puis t√©l√©chargement
            const response = await fetch(customQrCodeUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);

            const link = document.createElement("a");
            link.href = url;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            // Nettoyer l'URL temporaire
            window.URL.revokeObjectURL(url);
            console.log("T√©l√©chargement via fetch r√©ussi");
          }

          console.log(
            "T√©l√©chargement du QR code avec couleurs personnalis√©es termin√©"
          );
        }
      } catch (error) {
        console.error("Erreur lors du t√©l√©chargement:", error);
        alert("Erreur lors du t√©l√©chargement du QR code. Veuillez r√©essayer.");
      }
    });

    // Formatage automatique de l'IBAN avec animation
    const ibanInput = document.getElementById("iban") as HTMLInputElement;
    ibanInput?.addEventListener("input", (e) => {
      const target = e.target as HTMLInputElement;
      let value = target.value.replace(/\s/g, "").toUpperCase();

      console.log("=== DEBUG FORMATAGE IBAN ===");
      console.log("Valeur avant formatage:", target.value);
      console.log("Valeur nettoy√©e:", value);

      // Limiter √† BE + 14 chiffres
      if (value.length > 16) {
        value = value.substring(0, 16);
        console.log("Valeur tronqu√©e:", value);
      }

      // Forcer le pr√©fixe BE si pas pr√©sent
      if (value.length > 0 && !value.startsWith("BE")) {
        if (value.startsWith("B")) {
          value = "BE" + value.substring(1);
        } else {
          value = "BE" + value;
        }
        console.log("Pr√©fixe BE ajout√©:", value);
      }

      // Formatage IBAN belge : BE12 3432 3423 2442
      let formatted = "";

      if (value.length >= 2) {
        formatted = value.substring(0, 2); // BE
        console.log("√âtape 1 - BE:", formatted);

        if (value.length > 2) {
          formatted += value.substring(2, 4); // BE12
          console.log("√âtape 2 - BE12:", formatted);

          if (value.length > 4) {
            formatted += " " + value.substring(4, 8); // BE12 3432
            console.log("√âtape 3 - BE12 3432:", formatted);

            if (value.length > 8) {
              formatted += " " + value.substring(8, 12); // BE12 3432 3423
              console.log("√âtape 4 - BE12 3432 3423:", formatted);

              if (value.length > 12) {
                formatted += " " + value.substring(12, 16); // BE12 3432 3423 2442
                console.log("√âtape 5 - BE12 3432 3423 2442:", formatted);
              }
            }
          }
        }
      }

      console.log("Valeur finale format√©e:", formatted);
      target.value = formatted;

      // Animation subtile lors de la saisie
      animateElement(
        target,
        [
          { borderColor: "rgb(107, 114, 128)" },
          { borderColor: "rgb(139, 92, 246)" },
          { borderColor: "rgb(107, 114, 128)" },
        ],
        {
          duration: 300,
        }
      );
    });

    // Animations au focus des inputs
    const inputs = document.querySelectorAll("input, textarea");
    inputs.forEach((input) => {
      input.addEventListener("focus", () => {
        if (input.parentElement) {
          animateElement(
            input.parentElement,
            [
              { transform: "scale(1)" },
              { transform: "scale(1.02)" },
              { transform: "scale(1)" },
            ],
            {
              duration: 200,
            }
          );
        }
      });
    });

    // √âcouteurs d'√©v√©nements pour les boutons
    resetBtn?.addEventListener("click", resetForm);
    saveDefaultsBtn?.addEventListener("click", saveDefaults);

    // Fonction pour cr√©er un QR code avec fond transparent en traitant l'image
    async function createTransparentQRCode(
      imageUrl: string,
      qrColor: string
    ): Promise<string> {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = "anonymous";

        img.onload = () => {
          const canvas = document.createElement("canvas");
          const ctx = canvas.getContext("2d");

          if (!ctx) {
            reject("Impossible de cr√©er le contexte canvas");
            return;
          }

          canvas.width = img.width;
          canvas.height = img.height;

          // Dessiner l'image sur le canvas
          ctx.drawImage(img, 0, 0);

          // Obtenir les donn√©es de l'image
          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
          const data = imageData.data;

          // Convertir la couleur hex en RGB
          const targetColor = hexToRgb(qrColor);
          if (!targetColor) {
            reject("Couleur invalide");
            return;
          }

          // Traiter chaque pixel
          for (let i = 0; i < data.length; i += 4) {
            const r = data[i];
            const g = data[i + 1];
            const b = data[i + 2];

            // Si le pixel est blanc ou tr√®s clair (fond), le rendre transparent
            if (r > 240 && g > 240 && b > 240) {
              data[i + 3] = 0; // Alpha = 0 (transparent)
            } else if (r < 50 && g < 50 && b < 50) {
              // Si le pixel est noir (QR code), le remplacer par la couleur choisie
              data[i] = targetColor.r; // Rouge
              data[i + 1] = targetColor.g; // Vert
              data[i + 2] = targetColor.b; // Bleu
              data[i + 3] = 255; // Alpha = 255 (opaque)
            }
          }

          // Remettre les donn√©es modifi√©es sur le canvas
          ctx.putImageData(imageData, 0, 0);

          // Convertir en URL de donn√©es
          const transparentDataUrl = canvas.toDataURL("image/png");
          resolve(transparentDataUrl);
        };

        img.onerror = () => {
          reject("Erreur lors du chargement de l'image");
        };

        img.src = imageUrl;
      });
    }

    // Fonction pour g√©n√©rer le QR code avec couleurs personnalis√©es (pour t√©l√©chargement)
    async function generateQRCodeWithColors(
      text: string,
      size: number = 300
    ): Promise<string> {
      const qrColor = (qrColorInput?.value || "#000000").replace("#", "");
      const isTransparent = transparentBgInput?.checked || false;
      const bgColor = isTransparent
        ? ""
        : (bgColorInput?.value || "#FFFFFF").replace("#", "");
      const selectedSize = qrSizeSelect?.value || size.toString();
      const errorCorrection = errorCorrectionSelect?.value || "M";
      const exportFormat = exportFormatSelect?.value || "png";
      const qrStyle = qrStyleSelect?.value || "square";
      const encodedText = encodeURIComponent(text);

      console.log("G√©n√©ration QR Code avec:", {
        qrColor,
        isTransparent,
        bgColor,
        size: selectedSize,
        errorCorrection,
        format: exportFormat,
        style: qrStyle,
      });

      // Note: L'API QR Server ne supporte pas tous les styles personnalis√©s
      // mais nous utilisons les param√®tres disponibles (taille, couleur, format, correction)

      if (isTransparent) {
        // Pour le fond transparent, g√©n√©rer d'abord avec fond blanc puis traiter
        const baseUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${selectedSize}x${selectedSize}&data=${encodedText}&format=png&margin=10&color=000000&bgcolor=FFFFFF&ecc=${errorCorrection}`;
        console.log("URL de base pour transparence:", baseUrl);

        try {
          const transparentUrl = await createTransparentQRCode(
            baseUrl,
            "#" + qrColor
          );
          console.log("QR Code transparent cr√©√© avec succ√®s");
          return transparentUrl;
        } catch (error) {
          console.error(
            "Erreur lors de la cr√©ation de la transparence:",
            error
          );
          // Fallback : retourner l'URL de base avec les couleurs demand√©es
          const fallbackUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${selectedSize}x${selectedSize}&data=${encodedText}&format=${exportFormat}&margin=10&color=${qrColor}&bgcolor=${bgColor || "FFFFFF"}&ecc=${errorCorrection}`;
          return fallbackUrl;
        }
      } else {
        // Fond color√© normal
        const url = `https://api.qrserver.com/v1/create-qr-code/?size=${selectedSize}x${selectedSize}&data=${encodedText}&format=${exportFormat}&margin=10&color=${qrColor}&bgcolor=${bgColor}&ecc=${errorCorrection}`;
        console.log("URL QR Code avec fond color√©:", url);
        return url;
      }
    }

    // Fonction pour configurer les onglets
    function setupTabs() {
      const tabButtons = document.querySelectorAll(".tab-button");
      const tabContents = document.querySelectorAll(".tab-content");

      tabButtons.forEach((button) => {
        button.addEventListener("click", () => {
          const targetTab = button.id.replace("tab-", "content-");

          // D√©sactiver tous les onglets
          tabButtons.forEach((btn) => {
            btn.classList.remove("active");
            btn.classList.add("text-gray-400", "hover:text-white");
            btn.classList.remove(
              "bg-gradient-to-r",
              "from-purple-600",
              "to-pink-600",
              "text-white",
              "shadow-lg"
            );
          });

          tabContents.forEach((content) => {
            content.classList.remove("active");
            content.classList.add("hidden");
          });

          // Activer l'onglet s√©lectionn√©
          button.classList.add("active");
          button.classList.remove("text-gray-400", "hover:text-white");
          button.classList.add(
            "bg-gradient-to-r",
            "from-purple-600",
            "to-pink-600",
            "text-white",
            "shadow-lg"
          );

          const targetContent = document.getElementById(targetTab);
          if (targetContent) {
            targetContent.classList.add("active");
            targetContent.classList.remove("hidden");

            // Animation d'apparition
            animateElement(
              targetContent,
              [
                { opacity: 0, transform: "translateY(10px)" },
                { opacity: 1, transform: "translateY(0px)" },
              ],
              {
                duration: 300,
                easing: "ease-out",
              }
            );
          }

          console.log("Onglet activ√©:", targetTab);
        });
      });
    }
  });
</script>

<style>
  /* Animations CSS personnalis√©es */
  @keyframes float {
    0%,
    100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-15px);
    }
  }

  @keyframes glow {
    0%,
    100% {
      box-shadow: 0 0 30px rgba(139, 92, 246, 0.2);
    }
    50% {
      box-shadow: 0 0 50px rgba(139, 92, 246, 0.4);
    }
  }

  @keyframes pulse-glow {
    0%,
    100% {
      box-shadow: 0 0 20px rgba(139, 92, 246, 0.3);
    }
    50% {
      box-shadow: 0 0 40px rgba(139, 92, 246, 0.6);
    }
  }

  @keyframes gradient-shift {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  .float-animation {
    animation: float 4s ease-in-out infinite;
  }

  .glow-animation {
    animation: glow 3s ease-in-out infinite;
  }

  .pulse-glow {
    animation: pulse-glow 2s ease-in-out infinite;
  }

  .gradient-animation {
    background-size: 200% 200%;
    animation: gradient-shift 3s ease infinite;
  }

  /* Effets de hover am√©lior√©s */
  .group:hover .group-hover\:border-purple-400 {
    border-color: rgb(196, 181, 253);
  }

  /* Transitions fluides */
  * {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Effets de glassmorphism */
  .backdrop-blur-xl {
    backdrop-filter: blur(20px);
  }

  /* Scrollbar personnalis√©e */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: rgba(55, 65, 81, 0.3);
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb {
    background: linear-gradient(
      to bottom,
      rgb(139, 92, 246),
      rgb(219, 39, 119)
    );
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(to bottom, rgb(124, 58, 237), rgb(190, 24, 93));
  }

  /* Enlever les fl√®ches des inputs number */
  .no-arrows::-webkit-outer-spin-button,
  .no-arrows::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .no-arrows[type="number"] {
    -moz-appearance: textfield;
  }

  /* Am√©lioration des validations visuelles */
  input:invalid {
    border-color: rgb(239, 68, 68) !important;
  }

  input:valid {
    border-color: rgb(34, 197, 94);
  }

  textarea:invalid {
    border-color: rgb(239, 68, 68) !important;
  }

  textarea:valid {
    border-color: rgb(34, 197, 94);
  }

  /* Animation pour les champs requis */
  input:required:focus,
  textarea:required:focus {
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }

  /* Am√©liorations pour l'accessibilit√© */
  button:focus-visible,
  input:focus-visible,
  textarea:focus-visible {
    outline: 2px solid rgb(139, 92, 246);
    outline-offset: 2px;
  }

  /* Responsive pour les textes longs */
  .break-words {
    word-wrap: break-word;
    word-break: break-word;
    hyphens: auto;
  }

  /* Am√©lioration des boutons sur mobile */
  @media (max-width: 640px) {
    button {
      min-height: 44px; /* Taille minimum recommand√©e pour le touch */
    }

    input[type="color"] {
      min-width: 44px;
      min-height: 44px;
    }
  }

  /* Animation pour les √©tats de chargement */
  .loading {
    opacity: 0.7;
    pointer-events: none;
  }

  /* Am√©lioration du contraste pour l'accessibilit√© */
  .text-gray-400 {
    color: rgb(156, 163, 175);
  }

  .text-gray-300 {
    color: rgb(209, 213, 219);
  }

  /* Responsive pour les grilles */
  @media (max-width: 1279px) {
    .xl\:grid-cols-2 {
      grid-template-columns: 1fr;
    }
  }

  /* Am√©lioration des espacements sur mobile */
  @media (max-width: 640px) {
    .space-y-6 > * + * {
      margin-top: 1rem;
    }

    .gap-3 {
      gap: 0.5rem;
    }
  }

  /* Styles pour les onglets */
  .tab-button {
    background: rgba(55, 65, 81, 0.5);
    color: rgb(156, 163, 175);
    border: 1px solid rgba(75, 85, 99, 0.5);
  }

  .tab-button:hover {
    color: white;
    background: rgba(75, 85, 99, 0.7);
  }

  .tab-button.active {
    background: linear-gradient(to right, rgb(147, 51, 234), rgb(219, 39, 119));
    color: white;
    border: 1px solid rgba(147, 51, 234, 0.5);
    box-shadow:
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  .tab-content {
    opacity: 1;
    transform: translateY(0);
    transition: all 0.3s ease-out;
  }

  .tab-content.hidden {
    display: none;
  }

  /* Styles pour les selects personnalis√©s */
  .custom-select-wrapper {
    position: relative;
  }

  .custom-select {
    background-image: none;
    padding-right: 3rem;
  }

  .custom-select:focus {
    outline: none;
  }

  .custom-select-arrow {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    transition: transform 0.2s ease;
  }

  .custom-select:focus + .custom-select-arrow {
    transform: translateY(-50%) rotate(180deg);
  }

  .custom-select option {
    background: rgb(55, 65, 81);
    color: white;
    padding: 0.5rem;
  }

  .custom-select option:hover {
    background: rgb(75, 85, 99);
  }

  /* Scrollbar personnalis√©e pour l'historique */
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: rgba(139, 92, 246, 0.5) rgba(55, 65, 81, 0.3);
  }

  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: rgba(55, 65, 81, 0.3);
    border-radius: 3px;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(139, 92, 246, 0.5);
    border-radius: 3px;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgba(139, 92, 246, 0.7);
  }

  /* Animation pour les √©l√©ments de l'historique */
  .history-item {
    transition: all 0.2s ease;
  }

  .history-item:hover {
    transform: translateX(4px);
    background: rgba(75, 85, 99, 0.5) !important;
  }

  /* Responsive pour les onglets */
  @media (max-width: 640px) {
    .tab-button {
      font-size: 0.75rem;
      padding: 0.5rem 0.75rem;
    }

    .tab-button span:not(.sm\\:hidden) {
      display: none;
    }

    .tab-button .sm\\:hidden {
      display: inline !important;
    }
  }

  /* Am√©lioration des focus states pour l'accessibilit√© */
  .tab-button:focus-visible {
    outline: 2px solid rgb(139, 92, 246);
    outline-offset: 2px;
  }

  .custom-select:focus-visible {
    outline: 2px solid rgb(139, 92, 246);
    outline-offset: 2px;
  }
</style>
