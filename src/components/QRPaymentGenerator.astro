---
// Le QR code sera généré côté client avec JavaScript
import Header from './Header.astro';
import { canUserCreateQR } from '../lib/supabase';

const { user, userProfile } = Astro.locals;

// Vérifier si l'utilisateur peut créer un QR code
let canCreate = true;
let limitMessage = '';

if (user && userProfile) {
  try {
    canCreate = await canUserCreateQR(user.id);
    if (!canCreate) {
      if (userProfile.current_plan_type === 'credits') {
        limitMessage = `Vous n'avez plus de crédits disponibles. Achetez des crédits ou passez au plan Premium pour un accès illimité.`;
      } else if (userProfile.current_plan_type === 'none') {
        limitMessage = `Vous n'avez pas de plan actif. Achetez des crédits ou souscrivez au plan Premium.`;
      } else {
        limitMessage = `Limite mensuelle atteinte (${userProfile.qr_codes_used_this_month} QR codes). Votre limite se réinitialisera le mois prochain.`;
      }
    }
  } catch (error) {
    console.error('Erreur lors de la vérification des limites:', error);
  }
}
---

<!-- Header avec informations utilisateur -->
<Header />

<!-- Script pour passer les informations utilisateur au JavaScript -->
<script define:vars={{ 
  userId: user?.id, 
  userPlanType: userProfile?.current_plan_type,
  usedCount: userProfile?.qr_codes_used_this_month,
  availableCredits: userProfile?.available_credits
}}>
  // Ajouter les informations utilisateur au body pour que le JavaScript puisse y accéder
  if (userId) {
    document.body.setAttribute('data-user-id', userId);
    document.body.setAttribute('data-user-plan-type', userPlanType || 'none');
    document.body.setAttribute('data-used-count', (usedCount || 0).toString());
    document.body.setAttribute('data-available-credits', (availableCredits || 0).toString());
  }
</script>

<div class="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
  <!-- Header avec animation -->
  <div class="text-center mb-8 lg:mb-12 animate-fade-in">
    <div class="inline-block p-3 sm:p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 mb-4 sm:mb-6 float-animation">
      <svg class="w-8 h-8 sm:w-12 sm:h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
      </svg>
    </div>
    <h1 class="text-3xl sm:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-purple-400 via-pink-400 to-indigo-400 bg-clip-text text-transparent mb-3 sm:mb-4">
      Wipay
    </h1>
    <p class="text-lg sm:text-xl text-gray-300 max-w-2xl mx-auto px-4">
      Créez des QR codes élégants pour vos paiements bancaires instantanés
    </p>
  </div>

  <!-- Alerte de limite si nécessaire -->
  {!canCreate && (
    <div class="max-w-7xl mx-auto mb-6 p-4 bg-red-900/50 border border-red-500/50 rounded-xl text-red-200">
      <div class="flex items-center">
        <svg class="w-5 h-5 text-red-400 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
        </svg>
        <div>
          <h3 class="font-semibold">Limite atteinte</h3>
          <p class="text-sm mt-1">{limitMessage}</p>
          {userProfile?.subscription_status !== 'active' && (
            <a href="/pricing" class="inline-block mt-2 bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
              Voir les plans
            </a>
          )}
        </div>
      </div>
    </div>
  )}

  <div class="grid xl:grid-cols-2 gap-6 lg:gap-12">
    <!-- Formulaire de saisie -->
    <div class="space-y-6 lg:space-y-8 animate-slide-in-left order-1">
      <div class="bg-gradient-to-br from-gray-800/80 to-gray-900/80 backdrop-blur-xl p-6 lg:p-8 rounded-3xl border border-gray-700/50 shadow-2xl glow-animation">
        <h2 class="text-2xl lg:text-3xl font-bold text-white mb-6 flex items-center">
          <div class="w-6 h-6 lg:w-8 lg:h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg mr-3 flex items-center justify-center">
            <svg class="w-4 h-4 lg:w-5 lg:h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
            </svg>
          </div>
          <span class="text-lg lg:text-2xl">Informations de paiement</span>
        </h2>
        
        <form id="payment-form" class="space-y-6">
          <!-- IBAN -->
          <div class="group">
            <label for="iban" class="block text-sm font-semibold text-gray-300 mb-3">
              IBAN belge du destinataire *
            </label>
            <div class="relative">
              <input
                type="text"
                id="iban"
                name="iban"
                placeholder="BE68 5390 0754 7034"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400"
                required
                maxlength="19"
                title="Veuillez entrer un IBAN belge valide (format: BE68 5390 0754 7034)"
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
                </svg>
              </div>
            </div>
            <p class="text-xs text-gray-400 mt-1">Format: BE68 5390 0754 7034</p>
          </div>

          <!-- Montant -->
          <div class="group">
            <label for="amount" class="block text-sm font-semibold text-gray-300 mb-3">
              Montant (€) *
            </label>
            <div class="relative">
              <input
                type="number"
                id="amount"
                name="amount"
                placeholder="0.00"
                step="0.01"
                min="0.01"
                max="999999.99"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400 no-arrows"
                required
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <span class="text-purple-400 font-semibold">€</span>
              </div>
            </div>
            <p class="text-xs text-gray-400 mt-1">Montant minimum: 0.01€</p>
          </div>

          <!-- Communication -->
          <div class="group">
            <label for="communication" class="block text-sm font-semibold text-gray-300 mb-3">
              Communication / Référence
            </label>
            <textarea
              id="communication"
              name="communication"
              placeholder="Description du paiement (optionnel)"
              rows="3"
              class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 resize-none group-hover:border-purple-400"
              minlength="3"
              maxlength="140"
            ></textarea>
            <p class="text-xs text-gray-400 mt-1">Optionnel - Entre 3 et 140 caractères si renseigné</p>
          </div>

          <!-- Nom du bénéficiaire -->
          <div class="group">
            <label for="beneficiary" class="block text-sm font-semibold text-gray-300 mb-3">
              Nom du bénéficiaire
            </label>
            <div class="relative">
              <input
                type="text"
                id="beneficiary"
                name="beneficiary"
                placeholder="Nom du destinataire"
                class="w-full px-6 py-4 bg-gray-700/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300 group-hover:border-purple-400"
              />
              <div class="absolute inset-y-0 right-0 flex items-center pr-4">
                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              </div>
            </div>
          </div>

          <button
            type="submit"
            class={`w-full py-3 sm:py-4 px-6 sm:px-8 rounded-xl font-bold text-base sm:text-lg transition-all duration-300 shadow-2xl relative overflow-hidden group ${
              canCreate 
                ? 'bg-gradient-to-r from-purple-600 via-pink-600 to-indigo-600 text-white hover:from-purple-700 hover:via-pink-700 hover:to-indigo-700 transform hover:scale-105 hover:shadow-purple-500/25' 
                : 'bg-gray-600 text-gray-300 cursor-not-allowed opacity-50'
            }`}
            disabled={!canCreate}
          >
            <span class="relative z-10 flex items-center justify-center gap-2">
              <span>{canCreate ? 'Générer le QR Code' : 'Limite atteinte'}</span>
              <span>{canCreate ? '✨' : '🚫'}</span>
            </span>
            {canCreate && (
              <div class="absolute inset-0 bg-gradient-to-r from-purple-600 to-pink-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            )}
          </button>

          <!-- Boutons d'actions -->
          <div class="flex flex-col sm:flex-row gap-3 sm:gap-4 mt-6">
            <button
              type="button"
              id="reset-btn"
              class="flex-1 bg-gradient-to-r from-gray-600 to-gray-700 text-white py-3 px-4 rounded-xl font-semibold hover:from-gray-700 hover:to-gray-800 transition-all duration-300 transform hover:scale-105 text-sm sm:text-base"
            >
              <span class="flex items-center justify-center gap-2">
                <span>🔄</span>
                <span>Reset</span>
              </span>
            </button>
            
            <button
              type="button"
              id="save-defaults-btn"
              class="flex-1 bg-gradient-to-r from-emerald-600 to-teal-600 text-white py-3 px-4 rounded-xl font-semibold hover:from-emerald-700 hover:to-teal-700 transition-all duration-300 transform hover:scale-105 text-sm sm:text-base"
            >
              <span class="flex items-center justify-center gap-2">
                <span>💾</span>
                <span>Sauvegarder</span>
              </span>
            </button>
          </div>

          <!-- Indicateur de sauvegarde -->
          <div id="save-indicator" class="hidden mt-3 p-3 bg-green-900/50 border border-green-500/30 rounded-lg text-green-300 text-sm text-center">
            ✅ Valeurs par défaut sauvegardées !
          </div>

          <!-- Système d'onglets pour les fonctionnalités avancées -->
          <div class="mt-8">
            <!-- Navigation des onglets -->
            <div class="flex flex-wrap gap-2 mb-6 p-1 bg-gray-800/50 rounded-xl border border-gray-700/50">
              <button
                type="button"
                id="tab-colors"
                class="tab-button active flex-1 min-w-0 px-3 sm:px-4 py-2 sm:py-3 rounded-lg font-semibold text-xs sm:text-sm transition-all duration-300 flex items-center justify-center gap-1 sm:gap-2"
              >
                <span class="text-base sm:text-lg">🎨</span>
                <span class="hidden sm:inline">Couleurs</span>
                <span class="sm:hidden">🎨</span>
              </button>
              
              <button
                type="button"
                id="tab-creative"
                class="tab-button hidden flex-1 min-w-0 px-3 sm:px-4 py-2 sm:py-3 rounded-lg font-semibold text-xs sm:text-sm transition-all duration-300 flex items-center justify-center gap-1 sm:gap-2"
              >
                <span class="text-base sm:text-lg">✨</span>
                <span class="hidden sm:inline">Créativité</span>
                <span class="sm:hidden">✨</span>
              </button>
              
              <button
                type="button"
                id="tab-productivity"
                class="tab-button flex-1 min-w-0 px-3 sm:px-4 py-2 sm:py-3 rounded-lg font-semibold text-xs sm:text-sm transition-all duration-300 flex items-center justify-center gap-1 sm:gap-2"
              >
                <span class="text-base sm:text-lg">⚡</span>
                <span class="hidden sm:inline">Productivité</span>
                <span class="sm:hidden">⚡</span>
              </button>
            </div>

            <!-- Contenu des onglets -->
            <div class="tab-content-container">
              <!-- Onglet Couleurs -->
              <div id="content-colors" class="tab-content active">
                <div class="p-4 sm:p-6 bg-gradient-to-r from-indigo-900/30 to-purple-900/30 rounded-xl border border-indigo-500/30">
                  <h3 class="text-lg sm:text-xl font-bold text-white mb-4 flex items-center flex-wrap gap-2">
                    <svg class="w-5 h-5 text-indigo-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a4 4 0 004-4V5z"></path>
                    </svg>
                    <span>🎨 Personnalisation des Couleurs</span>
                  </h3>
                  
                  <div class="space-y-4 sm:space-y-0 sm:grid sm:grid-cols-2 sm:gap-4">
                    <!-- Couleur du QR Code -->
                    <div class="group">
                      <label for="qr-color" class="block text-sm font-semibold text-gray-300 mb-3">
                        Couleur du QR Code
                      </label>
                      <div class="flex items-center gap-3">
                        <input
                          type="color"
                          id="qr-color"
                          name="qr-color"
                          value="#000000"
                          class="w-12 h-12 rounded-lg border-2 border-gray-600 cursor-pointer hover:border-purple-400 transition-colors flex-shrink-0"
                        />
                        <span id="qr-color-value" class="text-gray-300 font-mono text-sm">#000000</span>
                      </div>
                    </div>

                    <!-- Couleur du fond -->
                    <div class="group">
                      <label for="bg-color" class="block text-sm font-semibold text-gray-300 mb-3">
                        Couleur du fond
                      </label>
                      <div class="flex items-center gap-3">
                        <input
                          type="color"
                          id="bg-color"
                          name="bg-color"
                          value="#FFFFFF"
                          class="w-12 h-12 rounded-lg border-2 border-gray-600 cursor-pointer hover:border-purple-400 transition-colors flex-shrink-0"
                        />
                        <span id="bg-color-value" class="text-gray-300 font-mono text-sm">#FFFFFF</span>
                      </div>
                    </div>
                  </div>

                  <!-- Option fond transparent -->
                  <div class="mt-6">
                    <label class="flex items-start sm:items-center cursor-pointer group">
                      <input
                        type="checkbox"
                        id="transparent-bg"
                        name="transparent-bg"
                        class="sr-only"
                      />
                      <div class="relative flex-shrink-0">
                        <div class="w-6 h-6 bg-gray-600 rounded border-2 border-gray-500 group-hover:border-purple-400 transition-colors"></div>
                        <div class="absolute inset-0 w-6 h-6 bg-gradient-to-r from-purple-500 to-pink-500 rounded opacity-0 transition-opacity duration-200" id="checkbox-bg"></div>
                        <svg class="absolute inset-0 w-6 h-6 text-white opacity-0 transition-opacity duration-200" id="checkbox-check" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path>
                        </svg>
                      </div>
                      <span class="ml-3 text-gray-300 font-medium group-hover:text-white transition-colors text-sm sm:text-base">
                        🔍 Fond transparent (pour affiches)
                      </span>
                    </label>
                  </div>

                  <!-- Aperçu des couleurs -->
                  <div class="mt-6 p-4 bg-gray-800/50 rounded-lg">
                    <p class="text-xs text-gray-400 mb-3">Aperçu des couleurs :</p>
                    <div class="flex items-center gap-4 flex-wrap">
                      <div id="color-preview" class="w-16 h-16 rounded-lg border-2 border-gray-600 flex items-center justify-center text-xs font-bold flex-shrink-0" style="background-color: #FFFFFF; color: #000000;">
                        QR
                      </div>
                      <div class="text-xs text-gray-400 space-y-1">
                        <div>QR: <span id="preview-qr-color">#000000</span></div>
                        <div>Fond: <span id="preview-bg-color">#FFFFFF</span></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Onglet Créativité -->
              <div id="content-creative" class="tab-content hidden" style="display: none;">
                <div class="p-4 sm:p-6 bg-gradient-to-r from-pink-900/30 to-rose-900/30 rounded-xl border border-pink-500/30">
                  <h3 class="text-lg sm:text-xl font-bold text-white mb-6 flex items-center flex-wrap gap-2">
                    <svg class="w-5 h-5 text-pink-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                    </svg>
                    <span>✨ Options Créatives</span>
                  </h3>
                  
                  <div class="grid sm:grid-cols-2 gap-6">
                    <!-- Style du QR Code -->
                    <div class="group">
                      <label for="qr-style" class="block text-sm font-semibold text-gray-300 mb-3">
                        Style du QR Code
                      </label>
                      <div class="custom-select-wrapper">
                        <select
                          id="qr-style"
                          name="qr-style"
                          class="custom-select w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-xl text-white focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all duration-300 appearance-none cursor-pointer"
                        >
                          <option value="square">🔲 Carrés classiques</option>
                          <option value="rounded">🔘 Carrés arrondis</option>
                          <option value="dots">⚫ Points circulaires</option>
                          <option value="hexagon">⬡ Hexagones</option>
                        </select>
                        <div class="custom-select-arrow">
                          <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                          </svg>
                        </div>
                      </div>
                      <p class="text-xs text-amber-400 mt-1">⚠️ Styles avancés en développement</p>
                    </div>

                    <!-- Taille du QR Code -->
                    <div class="group">
                      <label for="qr-size" class="block text-sm font-semibold text-gray-300 mb-3">
                        Taille d'export
                      </label>
                      <div class="custom-select-wrapper">
                        <select
                          id="qr-size"
                          name="qr-size"
                          class="custom-select w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-xl text-white focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all duration-300 appearance-none cursor-pointer"
                        >
                          <option value="150">📱 Petit - 150x150px</option>
                          <option value="300" selected>💻 Standard - 300x300px</option>
                          <option value="600">🖥️ Grand - 600x600px</option>
                          <option value="1200">🖨️ Print HD - 1200x1200px</option>
                        </select>
                        <div class="custom-select-arrow">
                          <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                          </svg>
                        </div>
                      </div>
                    </div>

                    <!-- Format d'export -->
                    <div class="group">
                      <label for="export-format" class="block text-sm font-semibold text-gray-300 mb-3">
                        Format d'export
                      </label>
                      <div class="custom-select-wrapper">
                        <select
                          id="export-format"
                          name="export-format"
                          class="custom-select w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-xl text-white focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all duration-300 appearance-none cursor-pointer"
                        >
                          <option value="png" selected>🖼️ PNG (Recommandé)</option>
                          <option value="svg">📐 SVG (Vectoriel)</option>
                          <option value="jpeg">📷 JPEG (Photo)</option>
                        </select>
                        <div class="custom-select-arrow">
                          <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                          </svg>
                        </div>
                      </div>
                    </div>

                    <!-- Niveau de correction d'erreur -->
                    <div class="group">
                      <label for="error-correction" class="block text-sm font-semibold text-gray-300 mb-3">
                        Résistance aux dommages
                      </label>
                      <div class="custom-select-wrapper">
                        <select
                          id="error-correction"
                          name="error-correction"
                          class="custom-select w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-xl text-white focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all duration-300 appearance-none cursor-pointer"
                        >
                          <option value="L">🔴 Faible (7% récupération)</option>
                          <option value="M" selected>🟡 Moyen (15% récupération)</option>
                          <option value="Q">🟠 Élevé (25% récupération)</option>
                          <option value="H">🟢 Maximum (30% récupération)</option>
                        </select>
                        <div class="custom-select-arrow">
                          <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                          </svg>
                        </div>
                      </div>
                      <p class="text-xs text-gray-400 mt-1">Plus élevé = QR code plus résistant mais plus dense</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Onglet Productivité -->
              <div id="content-productivity" class="tab-content hidden">
                <div class="p-4 sm:p-6 bg-gradient-to-r from-emerald-900/30 to-teal-900/30 rounded-xl border border-emerald-500/30">
                  <h3 class="text-lg sm:text-xl font-bold text-white mb-4 flex items-center flex-wrap gap-2">
                    <svg class="w-5 h-5 text-emerald-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                    </svg>
                    <span>⚡ Productivité</span>
                    <span class="text-xs bg-gradient-to-r from-emerald-500 to-teal-500 text-white px-2 py-1 rounded-full">
                      🚀 Nouveau
                    </span>
                  </h3>
                  
                  <div class="space-y-6">
                    <!-- Templates prédéfinis -->
                    <div class="group">
                      <label for="template-select" class="block text-sm font-semibold text-gray-300 mb-3">
                        Templates prédéfinis
                      </label>
                      <select
                        id="template-select"
                        name="template-select"
                        class="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-xl text-white focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-300"
                      >
                        <option value="">🎯 Sélectionner un template...</option>
                        <option value="invoice">🧾 Facture (50€)</option>
                        <option value="donation">💝 Donation (10€)</option>
                        <option value="rent">🏠 Loyer (800€)</option>
                        <option value="utilities">⚡ Facture énergie (120€)</option>
                        <option value="subscription">📱 Abonnement (15€)</option>
                        <option value="freelance">💼 Prestation freelance (250€)</option>
                      </select>
                    </div>

                    <!-- Historique des QR codes -->
                    <div class="group">
                      <div class="flex items-center justify-between mb-3">
                        <label class="block text-sm font-semibold text-gray-300">
                          Historique récent
                        </label>
                        <button
                          type="button"
                          id="clear-history-btn"
                          class="text-xs text-red-400 hover:text-red-300 transition-colors"
                        >
                          🗑️ Vider
                        </button>
                      </div>
                      <div id="history-container" class="space-y-2 max-h-32 overflow-y-auto">
                        <p class="text-xs text-gray-500 italic">Aucun QR code généré récemment</p>
                      </div>
                    </div>

                    <!-- Actions rapides -->
                    <div class="grid grid-cols-2 gap-3">
                      <button
                        type="button"
                        id="export-settings-btn"
                        class="flex items-center justify-center gap-2 px-4 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-indigo-700 transition-all duration-300 text-sm"
                      >
                        <span>📤</span>
                        <span>Exporter config</span>
                      </button>
                      
                      <button
                        type="button"
                        id="import-settings-btn"
                        class="flex items-center justify-center gap-2 px-4 py-3 bg-gradient-to-r from-purple-600 to-violet-600 text-white rounded-xl font-semibold hover:from-purple-700 hover:to-violet-700 transition-all duration-300 text-sm"
                      >
                        <span>📥</span>
                        <span>Importer config</span>
                      </button>
                    </div>

                    <!-- Input caché pour l'import -->
                    <input type="file" id="import-file-input" accept=".json" class="hidden" />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- Zone d'affichage du QR Code -->
    <div class="space-y-6 lg:space-y-8 animate-slide-in-right order-2 xl:order-2">
      <div class="bg-gradient-to-br from-gray-800/80 to-gray-900/80 backdrop-blur-xl p-6 lg:p-8 rounded-3xl border border-gray-700/50 shadow-2xl min-h-[400px] lg:min-h-[500px] flex flex-col items-center justify-center">
        <div id="qr-container" class="hidden text-center space-y-4 lg:space-y-6 animate-fade-in w-full">
          <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-4 sm:p-6 lg:p-8 border border-white/20">
            <h3 class="text-xl sm:text-2xl font-bold text-white mb-4 lg:mb-6 flex items-center justify-center gap-2 flex-wrap">
              <span class="text-xl sm:text-2xl">📱</span>
              <span>Votre QR Code de Paiement</span>
              <span class="text-xs bg-purple-500/30 text-purple-200 px-2 py-1 rounded-full border border-purple-400/30">
                ⚡ Temps réel
              </span>
            </h3>
            <div class="bg-white p-3 sm:p-4 rounded-xl mx-auto inline-block">
              <img id="qr-image" alt="QR Code de paiement" class="mx-auto rounded-lg shadow-2xl max-w-full h-auto" />
            </div>
            <p class="text-purple-200 mt-3 sm:mt-4 text-sm">
              Scannez ce code avec votre application bancaire
            </p>
          </div>

          <!-- Détails du paiement -->
          <div id="payment-details" class="p-4 sm:p-6 bg-gradient-to-r from-blue-900/50 to-purple-900/50 rounded-2xl border border-blue-500/30 animate-slide-up">
            <h4 class="font-bold text-white mb-4 flex items-center text-sm sm:text-base">
              <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2 text-blue-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              Détails du paiement
            </h4>
            <div class="text-xs sm:text-sm text-gray-300 space-y-2">
              <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-0">
                <strong class="text-blue-400">IBAN :</strong> 
                <span id="display-iban" class="font-mono break-all sm:break-normal"></span>
              </div>
              <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-0">
                <strong class="text-green-400">Montant :</strong>
                <div class="flex items-center gap-1">
                  <span id="display-amount"></span> €
                </div>
              </div>
              <div id="display-communication-container" class="hidden">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-2">
                  <strong class="text-purple-400 flex-shrink-0">Communication :</strong> 
                  <span id="display-communication" class="break-words"></span>
                </div>
              </div>
              <div id="display-beneficiary-container" class="hidden">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center p-2 bg-gray-800/50 rounded-lg gap-1 sm:gap-0">
                  <strong class="text-pink-400">Bénéficiaire :</strong> 
                  <span id="display-beneficiary" class="break-words"></span>
                </div>
              </div>
            </div>
          </div>

          <!-- Bouton de téléchargement -->
          <button
            id="download-btn"
            class="w-full bg-gradient-to-r from-green-600 to-emerald-600 text-white py-3 px-4 sm:px-6 rounded-xl font-semibold hover:from-green-700 hover:to-emerald-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-green-500/25 text-sm sm:text-base"
          >
            <span class="flex items-center justify-center gap-2">
              <span>📥</span>
              <span>Télécharger le QR Code</span>
            </span>
          </button>

          <!-- Partage sur réseaux sociaux -->
          <div class="mt-6 p-4 bg-gradient-to-r from-blue-900/30 to-indigo-900/30 rounded-xl border border-blue-500/30 animate-slide-up">
            <h4 class="font-bold text-white mb-4 flex items-center text-sm sm:text-base">
              <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2 text-blue-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"></path>
              </svg>
              Partager le QR Code
            </h4>
            <div class="grid grid-cols-3 sm:grid-cols-4 gap-2 sm:gap-3">
              <button type="button" id="share-whatsapp" class="share-btn bg-green-600 hover:bg-green-700 text-white p-2 sm:p-3 rounded-lg transition-colors flex flex-col items-center justify-center text-xs sm:text-sm">
                <svg class="w-5 h-5 sm:w-6 sm:h-6 mb-1" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.297-.497.1-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
                </svg>
                WhatsApp
              </button>
              <button type="button" id="share-messenger" class="share-btn bg-blue-600 hover:bg-blue-700 text-white p-2 sm:p-3 rounded-lg transition-colors flex flex-col items-center justify-center text-xs sm:text-sm">
                <svg class="w-5 h-5 sm:w-6 sm:h-6 mb-1" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0C5.373 0 0 4.974 0 11.111c0 3.498 1.744 6.614 4.469 8.652V24l4.088-2.242c1.092.3 2.246.464 3.443.464 6.627 0 12-4.975 12-11.111S18.627 0 12 0zm1.191 14.963l-3.055-3.26-5.963 3.26L10.732 8l3.131 3.259L19.752 8l-6.561 6.963z"/>
                </svg>
                Messenger
              </button>
              <button type="button" id="share-telegram" class="share-btn bg-sky-500 hover:bg-sky-600 text-white p-2 sm:p-3 rounded-lg transition-colors flex flex-col items-center justify-center text-xs sm:text-sm">
                <svg class="w-5 h-5 sm:w-6 sm:h-6 mb-1" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.96 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/>
                </svg>
                Telegram
              </button>
              <button type="button" id="share-email" class="share-btn bg-gray-600 hover:bg-gray-700 text-white p-2 sm:p-3 rounded-lg transition-colors flex flex-col items-center justify-center text-xs sm:text-sm">
                <svg class="w-5 h-5 sm:w-6 sm:h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                </svg>
                Email
              </button>
              <button type="button" id="share-copy" class="share-btn bg-purple-600 hover:bg-purple-700 text-white p-2 sm:p-3 rounded-lg transition-colors flex flex-col items-center justify-center text-xs sm:text-sm">
                <svg class="w-5 h-5 sm:w-6 sm:h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"/>
                </svg>
                Copier lien
              </button>
              <button type="button" id="share-native" class="share-btn hidden bg-indigo-600 hover:bg-indigo-700 text-white p-2 sm:p-3 rounded-lg transition-colors flex flex-col items-center justify-center text-xs sm:text-sm">
                <svg class="w-5 h-5 sm:w-6 sm:h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"></path>
                </svg>
                Partager
              </button>
              <button type="button" id="share-linkedin" class="share-btn bg-blue-800 hover:bg-blue-900 text-white p-2 sm:p-3 rounded-lg transition-colors flex flex-col items-center justify-center text-xs sm:text-sm">
                <svg class="w-5 h-5 sm:w-6 sm:h-6 mb-1" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
                LinkedIn
              </button>
            </div>
            <div id="share-feedback" class="hidden mt-3 p-2 bg-green-900/50 text-green-200 text-xs text-center rounded-lg">
              Lien copié dans le presse-papiers !
            </div>
          </div>
        </div>

        <!-- Prévisualisation du QR code -->
        <div id="qr-preview" class="text-center">
          <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-4 sm:p-6 lg:p-8 border border-white/20">
            <h3 class="text-xl sm:text-2xl font-bold text-white mb-4 lg:mb-6 flex items-center justify-center gap-2 flex-wrap">
              <span class="text-xl sm:text-2xl">👁️</span>
              <span>Aperçu du QR Code</span>
              <span class="text-xs bg-blue-500/30 text-blue-200 px-2 py-1 rounded-full border border-blue-400/30">
                🎨 Prévisualisation
              </span>
            </h3>
            
            <!-- Container du QR code factice avec gestion du fond transparent -->
            <div id="preview-qr-container" class="inline-block p-3 sm:p-4 rounded-xl mx-auto" style="background-color: #FFFFFF;">
              <!-- QR Code factice généré en SVG -->
              <div id="preview-qr-code" class="w-48 h-48 sm:w-56 sm:h-56 mx-auto">
                <!-- Le QR code factice sera généré ici -->
              </div>
            </div>
            
            <p class="text-purple-200 mt-3 sm:mt-4 text-sm">
              🎨 Aperçu avec vos couleurs personnalisées
            </p>
            
            <!-- Informations de style -->
            <div class="mt-4 p-3 bg-gray-700/30 rounded-lg text-xs">
              <div class="flex justify-between items-center mb-1">
                <span class="text-gray-300">Couleur QR :</span>
                <span id="preview-color-info" class="font-mono text-white">#000000</span>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-300">Fond :</span>
                <span id="preview-bg-info" class="font-mono text-white">#FFFFFF</span>
              </div>
            </div>
          </div>
        </div>

        <div id="placeholder" class="text-center animate-pulse hidden">
          <div class="w-24 h-24 sm:w-32 sm:h-32 bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-full mx-auto mb-4 sm:mb-6 flex items-center justify-center float-animation">
            <svg class="w-12 h-12 sm:w-16 sm:h-16 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
            </svg>
          </div>
          <h3 class="text-xl sm:text-2xl font-semibold text-gray-400 mb-3">
            ✨ QR Code de Paiement
          </h3>
          <p class="text-gray-500 max-w-sm mx-auto text-sm sm:text-base px-4">
            Remplissez le formulaire pour générer votre QR code élégant
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Définir les interfaces TypeScript pour window
  declare global {
    interface Window {
      currentUserId?: string;
      userStats?: {
        qr_codes_used_this_month: number;
        available_credits: number;
        current_plan_type: string;
      };
      updateHeaderStats?: (data: any) => void;
    }
  }

  // Vérifier si l'utilisateur peut créer des QR codes
  const canCreateQR = document.querySelector('button[type="submit"]')?.hasAttribute('disabled') === false;

  // Fonction d'animation personnalisée (remplace animatejs)
  function animateElement(element: Element | string, keyframes: any, options: any = {}) {
    const el = typeof element === 'string' ? document.querySelector(element) : element;
    if (!el) return;
    
    const animation = (el as Element).animate(keyframes, {
      duration: options.duration || 300,
      easing: options.easing || 'ease',
      delay: options.delay || 0,
      fill: 'forwards'
    });
    
    if (options.complete) {
      animation.addEventListener('finish', options.complete);
    }
    
    return animation;
  }

  // Script inline pour QR Code generation (sans dépendance externe)
  function generateQRCode(text: string, size: number = 300): string {
    // Utilisation de l'API QR Server (service gratuit)
    const encodedText = encodeURIComponent(text);
    return `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodedText}&format=png&margin=10`;
  }

  // Attendre que le DOM soit chargé
  document.addEventListener('DOMContentLoaded', () => {
    // Animations d'entrée
    setTimeout(() => {
      animateElement('.animate-fade-in', [
        { opacity: 0, transform: 'translateY(30px)' },
        { opacity: 1, transform: 'translateY(0px)' }
      ], {
        duration: 800,
        easing: 'ease-out'
      });
    }, 100);

    setTimeout(() => {
      animateElement('.animate-slide-in-left', [
        { opacity: 0, transform: 'translateX(-50px)' },
        { opacity: 1, transform: 'translateX(0px)' }
      ], {
        duration: 1000,
        easing: 'ease-out'
      });
    }, 300);

    setTimeout(() => {
      animateElement('.animate-slide-in-right', [
        { opacity: 0, transform: 'translateX(50px)' },
        { opacity: 1, transform: 'translateX(0px)' }
      ], {
        duration: 1000,
        easing: 'ease-out'
      });
    }, 500);

    const form = document.getElementById('payment-form') as HTMLFormElement;
    const qrContainer = document.getElementById('qr-container') as HTMLElement;
    const placeholder = document.getElementById('placeholder') as HTMLElement;
    const qrImage = document.getElementById('qr-image') as HTMLImageElement;
    const downloadBtn = document.getElementById('download-btn') as HTMLButtonElement;
    const resetBtn = document.getElementById('reset-btn') as HTMLButtonElement;
    const saveDefaultsBtn = document.getElementById('save-defaults-btn') as HTMLButtonElement;
    const saveIndicator = document.getElementById('save-indicator') as HTMLElement;

    // Éléments d'affichage des détails
    const displayIban = document.getElementById('display-iban') as HTMLElement;
    const displayAmount = document.getElementById('display-amount') as HTMLElement;
    const displayCommunication = document.getElementById('display-communication') as HTMLElement;
    const displayCommunicationContainer = document.getElementById('display-communication-container') as HTMLElement;
    const displayBeneficiary = document.getElementById('display-beneficiary') as HTMLElement;
    const displayBeneficiaryContainer = document.getElementById('display-beneficiary-container') as HTMLElement;

    // Éléments du formulaire
    const amountInput = document.getElementById('amount') as HTMLInputElement;
    const communicationInput = document.getElementById('communication') as HTMLTextAreaElement;
    const beneficiaryInput = document.getElementById('beneficiary') as HTMLInputElement;
    
    // Éléments de personnalisation des couleurs
    const qrColorInput = document.getElementById('qr-color') as HTMLInputElement;
    const bgColorInput = document.getElementById('bg-color') as HTMLInputElement;
    const transparentBgInput = document.getElementById('transparent-bg') as HTMLInputElement;
    const qrColorValue = document.getElementById('qr-color-value') as HTMLElement;
    const bgColorValue = document.getElementById('bg-color-value') as HTMLElement;
    const colorPreview = document.getElementById('color-preview') as HTMLElement;
    const previewQrColor = document.getElementById('preview-qr-color') as HTMLElement;
    const previewBgColor = document.getElementById('preview-bg-color') as HTMLElement;
    const checkboxBg = document.getElementById('checkbox-bg') as HTMLElement;
    const checkboxCheck = document.getElementById('checkbox-check') as HTMLElement;

    // Nouveaux éléments pour les fonctionnalités avancées
    const qrStyleSelect = document.getElementById('qr-style') as HTMLSelectElement;
    const qrSizeSelect = document.getElementById('qr-size') as HTMLSelectElement;
    const exportFormatSelect = document.getElementById('export-format') as HTMLSelectElement;
    const errorCorrectionSelect = document.getElementById('error-correction') as HTMLSelectElement;
    const templateSelect = document.getElementById('template-select') as HTMLSelectElement;
    const historyContainer = document.getElementById('history-container') as HTMLElement;
    const clearHistoryBtn = document.getElementById('clear-history-btn') as HTMLButtonElement;
    const exportSettingsBtn = document.getElementById('export-settings-btn') as HTMLButtonElement;
    const importSettingsBtn = document.getElementById('import-settings-btn') as HTMLButtonElement;
    const importFileInput = document.getElementById('import-file-input') as HTMLInputElement;

    if (!form) {
      console.error('Formulaire non trouvé');
      return;
    }

    // Charger les valeurs par défaut au démarrage
    loadDefaults();
    setupColorHandlers();
    setupAdvancedFeatures();
    // setupCreativeHandlers(); // Désactivé temporairement
    setupTabs();
    loadHistory();
    setupShareButtons();
    
    // Initialiser la prévisualisation du QR code
    updateQRPreview();

    // Fonction pour charger les valeurs par défaut
    function loadDefaults() {
      try {
        const savedDefaults = localStorage.getItem('qr-payment-defaults');
        if (savedDefaults) {
          const defaults = JSON.parse(savedDefaults);
          console.log('Chargement des valeurs par défaut:', defaults);
          
          if (defaults.amount && amountInput) {
            amountInput.value = defaults.amount;
          }
          if (defaults.communication && communicationInput) {
            communicationInput.value = defaults.communication;
          }
          if (defaults.beneficiary && beneficiaryInput) {
            beneficiaryInput.value = defaults.beneficiary;
          }
        }
      } catch (error) {
        console.error('Erreur lors du chargement des valeurs par défaut:', error);
      }
    }

    // Fonction pour configurer les fonctionnalités avancées
    function setupAdvancedFeatures() {
      // Templates prédéfinis
      const templates = {
        invoice: {
          amount: '50.00',
          communication: 'Facture #2024-001 - Services professionnels',
          beneficiary: 'Entreprise Services Pro'
        },
        donation: {
          amount: '10.00',
          communication: 'Don pour association caritative',
          beneficiary: 'Association Aide Humanitaire'
        },
        rent: {
          amount: '800.00',
          communication: 'Loyer mensuel - Appartement Rue de la Paix',
          beneficiary: 'Agence Immobilière Central'
        },
        utilities: {
          amount: '120.00',
          communication: 'Facture électricité/gaz - Période janvier 2024',
          beneficiary: 'Fournisseur Énergie Plus'
        },
        subscription: {
          amount: '15.00',
          communication: 'Abonnement mensuel - Service Premium',
          beneficiary: 'Plateforme Digitale'
        },
        freelance: {
          amount: '250.00',
          communication: 'Prestation développement web - Projet XYZ',
          beneficiary: 'Freelance Développeur'
        }
      };

      // Gestionnaire de templates
      templateSelect?.addEventListener('change', (e) => {
        const templateKey = (e.target as HTMLSelectElement).value;
        if (templateKey && templates[templateKey as keyof typeof templates]) {
          const template = templates[templateKey as keyof typeof templates];
          
          if (amountInput) amountInput.value = template.amount;
          if (communicationInput) communicationInput.value = template.communication;
          if (beneficiaryInput) beneficiaryInput.value = template.beneficiary;
          
          // Animation de remplissage
          animateElement(form, [
            { transform: 'scale(1)' },
            { transform: 'scale(1.02)' },
            { transform: 'scale(1)' }
          ], {
            duration: 300
          });
          
          console.log('Template appliqué:', templateKey);
        }
      });

      // Export des paramètres
      exportSettingsBtn?.addEventListener('click', () => {
        try {
          const settings = {
            qrColor: qrColorInput?.value || '#000000',
            bgColor: bgColorInput?.value || '#FFFFFF',
            transparent: transparentBgInput?.checked || false,
            style: qrStyleSelect?.value || 'square',
            size: qrSizeSelect?.value || '300',
            format: exportFormatSelect?.value || 'png',
            errorCorrection: errorCorrectionSelect?.value || 'M',
            exportDate: new Date().toISOString()
          };
          
          const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });
          const url = URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.download = `wipay-config-${new Date().toISOString().slice(0, 10)}.json`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(url);
          
          console.log('Configuration exportée');
        } catch (error) {
          console.error('Erreur lors de l\'export:', error);
          alert('Erreur lors de l\'export de la configuration');
        }
      });

      // Import des paramètres
      importSettingsBtn?.addEventListener('click', () => {
        importFileInput?.click();
      });

      importFileInput?.addEventListener('change', (e) => {
        const file = (e.target as HTMLInputElement).files?.[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (event) => {
            try {
              const settings = JSON.parse(event.target?.result as string);
              
              // Appliquer les paramètres
              if (qrColorInput && settings.qrColor) qrColorInput.value = settings.qrColor;
              if (bgColorInput && settings.bgColor) bgColorInput.value = settings.bgColor;
              if (transparentBgInput && typeof settings.transparent === 'boolean') transparentBgInput.checked = settings.transparent;
              if (qrStyleSelect && settings.style) qrStyleSelect.value = settings.style;
              if (qrSizeSelect && settings.size) qrSizeSelect.value = settings.size;
              if (exportFormatSelect && settings.format) exportFormatSelect.value = settings.format;
              if (errorCorrectionSelect && settings.errorCorrection) errorCorrectionSelect.value = settings.errorCorrection;
              
              // Mettre à jour l'aperçu
              updateColorPreview();
              
              console.log('Configuration importée');
              alert('Configuration importée avec succès !');
            } catch (error) {
              console.error('Erreur lors de l\'import:', error);
              alert('Erreur lors de l\'import de la configuration');
            }
          };
          reader.readAsText(file);
        }
      });

      // Vider l'historique
      clearHistoryBtn?.addEventListener('click', () => {
        if (confirm('Êtes-vous sûr de vouloir vider l\'historique ?')) {
          localStorage.removeItem('qr-payment-history');
          loadHistory();
          console.log('Historique vidé');
        }
      });
    }

    // Fonction pour charger l'historique
    function loadHistory() {
      try {
        const history = JSON.parse(localStorage.getItem('qr-payment-history') || '[]');
        
        if (historyContainer) {
          if (history.length === 0) {
            historyContainer.innerHTML = '<p class="text-xs text-gray-500 italic">Aucun QR code généré récemment</p>';
          } else {
            historyContainer.innerHTML = history.slice(0, 5).map((item: any, index: number) => `
              <div class="flex items-center justify-between p-2 bg-gray-800/30 rounded-lg cursor-pointer hover:bg-gray-700/30 transition-colors" data-history-index="${index}">
                <div class="flex-1 min-w-0">
                  <p class="text-xs text-white font-medium truncate">${item.amount}€ - ${item.communication}</p>
                  <p class="text-xs text-gray-400">${new Date(item.date).toLocaleDateString()}</p>
                </div>
                <button class="text-xs text-emerald-400 hover:text-emerald-300 ml-2 flex-shrink-0">
                  📋 Utiliser
                </button>
              </div>
            `).join('');
            
            // Ajouter les gestionnaires d'événements pour l'historique
            historyContainer.querySelectorAll('[data-history-index]').forEach((item, index) => {
              item.addEventListener('click', () => {
                const historyItem = history[index];
                if (historyItem) {
                  if (amountInput) amountInput.value = historyItem.amount;
                  if (communicationInput) communicationInput.value = historyItem.communication;
                  if (beneficiaryInput) beneficiaryInput.value = historyItem.beneficiary;
                  
                  // Animation
                  animateElement(form, [
                    { transform: 'scale(1)' },
                    { transform: 'scale(1.02)' },
                    { transform: 'scale(1)' }
                  ], {
                    duration: 300
                  });
                  
                  console.log('Historique appliqué:', historyItem);
                }
              });
            });
          }
        }
      } catch (error) {
        console.error('Erreur lors du chargement de l\'historique:', error);
      }
    }

    // Fonction pour ajouter à l'historique
    function addToHistory(iban: string, amount: string, communication: string, beneficiary: string) {
      try {
        const history = JSON.parse(localStorage.getItem('qr-payment-history') || '[]');
        const newItem = {
          iban,
          amount,
          communication,
          beneficiary,
          date: new Date().toISOString()
        };
        
        // Éviter les doublons
        const exists = history.some((item: any) => 
          item.iban === iban && 
          item.amount === amount && 
          item.communication === communication
        );
        
        if (!exists) {
          history.unshift(newItem);
          // Garder seulement les 10 derniers
          if (history.length > 10) {
            history.splice(10);
          }
          
          localStorage.setItem('qr-payment-history', JSON.stringify(history));
          loadHistory();
        }
      } catch (error) {
        console.error('Erreur lors de l\'ajout à l\'historique:', error);
      }
    }

    // Fonction pour incrémenter l'utilisation des QR codes
    async function incrementQRUsage() {
      try {
        // Récupérer l'ID utilisateur depuis l'attribut data
        const userId = document.body.getAttribute('data-user-id');
        
        if (!userId || userId === 'null') {
          console.error('ID utilisateur non disponible');
          return;
        }

        console.log('Incrémentation usage QR pour:', userId);

        const response = await fetch('/api/increment-qr-usage', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId }),
        });

        const result = await response.json();

        if (result.success) {
          console.log('Compteur mis à jour:', result.data);
          
          // Mettre à jour l'affichage local si nécessaire
          updateLocalUsageDisplay(result.data);
          
          // Vérifier si l'utilisateur a atteint sa limite
          if (result.data.hasReachedLimit) {
            console.log('Limite atteinte après cette génération');
            // Optionnel : afficher un message ou désactiver le formulaire
            showLimitReachedMessage(result.data);
          }
        } else {
          console.error('Erreur lors de l\'incrémentation:', result.message);
        }
      } catch (error) {
        console.error('Erreur lors de l\'appel API increment-qr-usage:', error);
      }
    }

    // Fonction pour mettre à jour l'affichage local de l'utilisation
    function updateLocalUsageDisplay(data: any) {
      // Mettre à jour le header si il existe
      const usageDisplay = document.querySelector('[data-usage-display]');
      if (usageDisplay) {
        const limitText = data.qr_codes_limit === -1 ? '∞' : data.qr_codes_limit;
        usageDisplay.textContent = `${data.qr_codes_used_this_month}/${limitText} QR`;
      }
      
      // Mettre à jour les statistiques utilisateur si elles existent
      if ((window as any).userStats) {
        (window as any).userStats.qr_codes_used_this_month = data.qr_codes_used_this_month;
        (window as any).userStats.available_credits = data.available_credits;
      }
    }

    // Fonction pour afficher la confirmation avant génération
    async function showGenerationConfirmation() {
      return new Promise(async (resolve) => {
        // Récupérer les statistiques en temps réel depuis la base de données
        let currentStats;
        try {
          const userId = window.currentUserId;
          if (!userId) {
            console.error('ID utilisateur non disponible');
            resolve(false);
            return;
          }

          // Récupérer les vraies statistiques depuis Supabase
          const response = await fetch('/api/get-user-stats', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId }),
          });

          if (response.ok) {
            const result = await response.json();
            currentStats = result.data;
          } else {
            console.error('Erreur lors de la récupération des stats');
            currentStats = window.userStats; // Fallback
          }
        } catch (error) {
          console.error('Erreur lors de la récupération des stats:', error);
          currentStats = window.userStats; // Fallback
        }

        if (!currentStats) {
          console.error('Aucune statistique disponible');
          resolve(false);
          return;
        }
        
        // Créer la modal de confirmation
        const modal = document.createElement('div');
        modal.id = 'generation-confirmation-modal';
        modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm';
        
        let warningMessage = '';
        let warningIcon = '⚠️';
        let warningColor = 'text-yellow-400';
        let canProceed = true;
        
        if (currentStats.current_plan_type === 'credits') {
          if (currentStats.available_credits <= 0) {
            warningMessage = 'Attention : Vous n\'avez plus de crédits disponibles. Achetez des crédits ou passez au plan Premium pour un accès illimité.';
            warningIcon = '🚨';
            warningColor = 'text-red-400';
            canProceed = false;
          } else {
            warningMessage = `Vous allez utiliser 1 crédit. Il vous restera ${currentStats.available_credits - 1} crédit(s) après cette génération.`;
            warningIcon = '💳';
            warningColor = 'text-blue-400';
          }
        } else if (currentStats.current_plan_type === 'premium') {
          warningMessage = `Vous allez générer votre ${currentStats.qr_codes_used_this_month + 1}ème QR code ce mois-ci. Votre plan Premium vous donne un accès illimité.`;
          warningIcon = '⭐';
          warningColor = 'text-purple-400';
        } else {
          warningMessage = 'Attention : Vous n\'avez pas de plan actif. Achetez des crédits ou souscrivez au plan Premium.';
          warningIcon = '🚨';
          warningColor = 'text-red-400';
          canProceed = false;
        }
        
        modal.innerHTML = `
          <div class="bg-gray-800/95 backdrop-blur-xl rounded-2xl border border-gray-700/50 p-6 max-w-md mx-4 shadow-2xl">
            <div class="text-center mb-6">
              <div class="w-16 h-16 mx-auto mb-4 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-2xl">
                ${warningIcon}
              </div>
              <h3 class="text-xl font-bold text-white mb-2">
                ${canProceed ? 'Confirmer la génération' : 'Génération impossible'}
              </h3>
              <p class="text-sm ${warningColor} mb-4">
                ${warningMessage}
              </p>
              
              <div class="bg-gray-700/50 rounded-lg p-3 mb-4">
                <div class="flex justify-between items-center text-sm">
                  <span class="text-gray-300">Plan actuel :</span>
                  <span class="text-white font-medium">
                    ${currentStats.current_plan_type === 'premium' ? '⭐ Premium' : 
                      currentStats.current_plan_type === 'credits' ? '💳 Crédits' : '❌ Aucun plan'}
                  </span>
                </div>
                ${currentStats.current_plan_type === 'credits' ? `
                  <div class="flex justify-between items-center text-sm mt-1">
                    <span class="text-gray-300">Crédits disponibles :</span>
                    <span class="text-white font-medium">${currentStats.available_credits}</span>
                  </div>
                ` : currentStats.current_plan_type === 'premium' ? `
                  <div class="flex justify-between items-center text-sm mt-1">
                    <span class="text-gray-300">QR ce mois-ci :</span>
                    <span class="text-white font-medium">${currentStats.qr_codes_used_this_month}/∞</span>
                  </div>
                ` : ''}
              </div>
              
              ${!canProceed ? `
                <div class="bg-blue-900/30 border border-blue-500/30 rounded-lg p-3 mb-4">
                  <p class="text-xs text-blue-200">
                    💡 <strong>Astuce :</strong> Consultez nos plans pour continuer à générer des QR codes !
                  </p>
                </div>
              ` : ''}
            </div>
            
            <div class="flex gap-3">
              <button
                id="cancel-generation"
                class="flex-1 px-4 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-xl font-semibold transition-all duration-300"
              >
                ${canProceed ? '❌ Annuler' : '🔙 Retour'}
              </button>
              ${canProceed ? `
                <button
                  id="confirm-generation"
                  class="flex-1 px-4 py-3 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white rounded-xl font-semibold transition-all duration-300"
                >
                  ✅ Générer
                </button>
              ` : `
                <a
                  href="/pricing"
                  class="flex-1 px-4 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-xl font-semibold transition-all duration-300 text-center"
                >
                  💳 Voir les plans
                </a>
              `}
            </div>
          </div>
        `;
        
        document.body.appendChild(modal);
        
        // Animation d'apparition
        animateElement(modal, [
          { opacity: 0, transform: 'scale(0.9)' },
          { opacity: 1, transform: 'scale(1)' }
        ], {
          duration: 300
        });
        
        // Gestionnaires d'événements
        const cancelBtn = modal.querySelector('#cancel-generation');
        const confirmBtn = modal.querySelector('#confirm-generation');
        
        const cleanup = () => {
          animateElement(modal, [
            { opacity: 1, transform: 'scale(1)' },
            { opacity: 0, transform: 'scale(0.9)' }
          ], {
            duration: 200,
            complete: () => {
              modal.remove();
            }
          });
        };
        
        cancelBtn?.addEventListener('click', () => {
          cleanup();
          resolve(false);
        });
        
        if (confirmBtn) {
          confirmBtn.addEventListener('click', () => {
            cleanup();
            resolve(true);
          });
        }
        
        // Fermer avec Escape
        const handleEscape = (e: KeyboardEvent) => {
          if (e.key === 'Escape') {
            cleanup();
            resolve(false);
            document.removeEventListener('keydown', handleEscape);
          }
        };
        
        document.addEventListener('keydown', handleEscape);
        
        // Fermer en cliquant sur le fond
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            cleanup();
            resolve(false);
          }
        });
      });
    }

    // Fonction pour afficher un message de limite atteinte
    function showLimitReachedMessage(data: any) {
      // Créer ou mettre à jour le message de limite
      let limitAlert = document.getElementById('limit-reached-alert');
      
      if (!limitAlert) {
        limitAlert = document.createElement('div');
        limitAlert.id = 'limit-reached-alert';
        limitAlert.className = 'fixed top-4 right-4 z-50 max-w-sm p-4 bg-red-900/90 border border-red-500/50 rounded-xl text-red-200 backdrop-blur-xl';
        document.body.appendChild(limitAlert);
      }

      const message = data.current_plan_type === 'credits' 
        ? 'Vous n\'avez plus de crédits disponibles ! Achetez des crédits ou passez au plan Premium pour un accès illimité.'
        : `Limite mensuelle atteinte (${data.qr_codes_used_this_month} QR codes). Votre limite se réinitialisera le mois prochain.`;

      limitAlert.innerHTML = `
        <div class="flex items-start">
          <svg class="w-5 h-5 text-red-400 mr-3 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
          <div class="flex-1">
            <h3 class="font-semibold text-sm">Limite atteinte</h3>
            <p class="text-xs mt-1">${message}</p>
            ${data.current_plan_type === 'credits' ? '<a href="/pricing" class="inline-block mt-2 bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded text-xs font-medium transition-colors">Voir les plans</a>' : ''}
          </div>
          <button onclick="this.parentElement.parentElement.remove()" class="text-red-300 hover:text-red-100 ml-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      `;

      // Animation d'apparition
      animateElement(limitAlert, [
        { opacity: 0, transform: 'translateX(100%)' },
        { opacity: 1, transform: 'translateX(0%)' }
      ], {
        duration: 300
      });

      // Auto-suppression après 10 secondes
      setTimeout(() => {
        if (limitAlert && limitAlert.parentElement) {
          animateElement(limitAlert, [
            { opacity: 1, transform: 'translateX(0%)' },
            { opacity: 0, transform: 'translateX(100%)' }
          ], {
            duration: 300,
            complete: () => {
              limitAlert?.remove();
            }
          });
        }
      }, 10000);

      // Désactiver le formulaire si limite atteinte
      const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.classList.add('bg-gray-600', 'text-gray-300', 'cursor-not-allowed', 'opacity-50');
        submitBtn.classList.remove('bg-gradient-to-r', 'from-purple-600', 'via-pink-600', 'to-indigo-600', 'hover:from-purple-700', 'hover:via-pink-700', 'hover:to-indigo-700', 'transform', 'hover:scale-105');
        
        const buttonText = submitBtn.querySelector('span');
        if (buttonText) {
          buttonText.innerHTML = 'Limite atteinte 🚫';
        }
      }
    }

    // Fonction pour sauvegarder les valeurs par défaut
    function saveDefaults() {
      try {
        const defaults = {
          amount: amountInput?.value || '',
          communication: communicationInput?.value || '',
          beneficiary: beneficiaryInput?.value || ''
        };
        
        localStorage.setItem('qr-payment-defaults', JSON.stringify(defaults));
        console.log('Valeurs par défaut sauvegardées:', defaults);
        
        // Afficher l'indicateur de sauvegarde
        saveIndicator.classList.remove('hidden');
        animateElement(saveIndicator, [
          { opacity: 0, transform: 'translateY(-10px)' },
          { opacity: 1, transform: 'translateY(0px)' }
        ], {
          duration: 300
        });
        
        // Masquer l'indicateur après 3 secondes
        setTimeout(() => {
          animateElement(saveIndicator, [
            { opacity: 1, transform: 'translateY(0px)' },
            { opacity: 0, transform: 'translateY(-10px)' }
          ], {
            duration: 300,
            complete: () => {
              saveIndicator.classList.add('hidden');
            }
          });
        }, 3000);
        
      } catch (error) {
        console.error('Erreur lors de la sauvegarde:', error);
        alert('Erreur lors de la sauvegarde des valeurs par défaut');
      }
    }

    // Fonction pour reset le formulaire
    function resetForm() {
      form.reset();
      
      // Masquer le QR code et afficher la prévisualisation
      qrContainer.classList.add('hidden');
      const qrPreview = document.getElementById('qr-preview');
      if (qrPreview) {
        qrPreview.classList.remove('hidden');
      }
      
      // Remettre les couleurs par défaut
      if (qrColorInput) qrColorInput.value = '#000000';
      if (bgColorInput) bgColorInput.value = '#FFFFFF';
      if (transparentBgInput) transparentBgInput.checked = false;
      
      // Mettre à jour la prévisualisation avec les valeurs par défaut
      updateQRPreview();
      updateColorPreview();
      
      // Animation de reset
      animateElement(form, [
        { transform: 'scale(1)' },
        { transform: 'scale(0.98)' },
        { transform: 'scale(1)' }
      ], {
        duration: 300
      });
      
      console.log('Formulaire réinitialisé');
    }

    // Fonction pour configurer les gestionnaires de couleurs
    function setupColorHandlers() {
      // Gestionnaire pour la couleur du QR code
      qrColorInput?.addEventListener('input', (e) => {
        const color = (e.target as HTMLInputElement).value;
        qrColorValue.textContent = color;
        previewQrColor.textContent = color;
        updateColorPreview();
        updateQRCodeColors(); // Régénération avec nouvelles couleurs
      });

      // Gestionnaire pour la couleur du fond
      bgColorInput?.addEventListener('input', (e) => {
        const color = (e.target as HTMLInputElement).value;
        bgColorValue.textContent = color;
        previewBgColor.textContent = color;
        updateColorPreview();
        updateQRCodeColors(); // Régénération avec nouvelles couleurs
      });

      // Gestionnaire pour le fond transparent
      transparentBgInput?.addEventListener('change', (e) => {
        const isChecked = (e.target as HTMLInputElement).checked;
        
        if (isChecked) {
          checkboxBg.style.opacity = '1';
          checkboxCheck.style.opacity = '1';
          bgColorInput.disabled = true;
          bgColorInput.style.opacity = '0.5';
        } else {
          checkboxBg.style.opacity = '0';
          checkboxCheck.style.opacity = '0';
          bgColorInput.disabled = false;
          bgColorInput.style.opacity = '1';
        }
        
        updateColorPreview();
        updateQRCodeColors(); // Régénération avec nouvelles couleurs
      });
    }

    // Fonction pour configurer les gestionnaires des options créatives
    function setupCreativeHandlers() {
      // Gestionnaire pour le style du QR code
      qrStyleSelect?.addEventListener('change', () => {
        console.log('Style QR code changé:', qrStyleSelect.value);
        updateQRCodeColors(); // Régénération avec nouveau style
      });

      // Gestionnaire pour la taille du QR code
      qrSizeSelect?.addEventListener('change', () => {
        console.log('Taille QR code changée:', qrSizeSelect.value);
        updateQRCodeColors(); // Régénération avec nouvelle taille
      });

      // Gestionnaire pour le format d'export
      exportFormatSelect?.addEventListener('change', () => {
        console.log('Format d\'export changé:', exportFormatSelect.value);
        updateQRCodeColors(); // Régénération avec nouveau format
      });

      // Gestionnaire pour le niveau de correction d'erreur
      errorCorrectionSelect?.addEventListener('change', () => {
        console.log('Niveau de correction changé:', errorCorrectionSelect.value);
        updateQRCodeColors(); // Régénération avec nouveau niveau
      });
    }

    // Fonction pour mettre à jour le QR code affiché en temps réel
    async function updateQRCodeColors() {
      // Vérifier si un QR code est actuellement affiché
      if (!qrContainer.classList.contains('hidden') && qrImage.src) {
        // Récupérer les données du QR code depuis le formulaire
        const formData = new FormData(form);
        const iban = formData.get('iban') as string;
        const amount = formData.get('amount') as string;
        const communication = formData.get('communication') as string;
        const beneficiary = formData.get('beneficiary') as string;
        
        if (iban && amount && communication) {
          const ibanClean = iban.replace(/\s/g, '');
          const qrData = `BCD
002
1
SCT

${beneficiary || ''}
${ibanClean}
EUR${amount}


${communication || ''}`;

          // Générer le nouveau QR code avec les couleurs mises à jour
          const newQrCodeUrl = await generateQRCodeWithColors(qrData, 300);
          
          // Mettre à jour l'image avec une animation fluide
          qrImage.style.opacity = '0.7';
          qrImage.style.transition = 'opacity 0.3s ease';
          
          setTimeout(() => {
            qrImage.src = newQrCodeUrl;
            qrImage.onload = () => {
              qrImage.style.opacity = '1';
              // Mettre à jour l'affichage avec le motif damier si nécessaire
              updateQRCodeDisplay();
            };
          }, 150);
          
          console.log('QR Code mis à jour avec nouvelles couleurs');
        }
      }
    }

    // Fonction pour générer un QR code factice en SVG
    function generateFakeQRCode(color: string = '#000000'): string {
      // Pattern de QR code factice (21x21 modules comme un vrai QR code version 1)
      const pattern = [
        '111111101011001111111',
        '100000101110101000001',
        '101110101010101011101',
        '101110100111101011101',
        '101110101101101011101',
        '100000101001101000001',
        '111111101010101111111',
        '000000001110100000000',
        '110101111001011010110',
        '001011001101110100011',
        '110100110010001011010',
        '101010001111010101101',
        '010001110100101010010',
        '000000001011001101011',
        '111111101100110111001',
        '100000101010001000110',
        '101110101101110101011',
        '101110100011001011100',
        '101110101110110100101',
        '100000101001011101010',
        '111111101010101111111'
      ];
      
      const moduleSize = 11; // Taille de chaque module en pixels
      const totalSize = pattern.length * moduleSize;
      
      let svg = `<svg width="${totalSize}" height="${totalSize}" viewBox="0 0 ${totalSize} ${totalSize}" xmlns="http://www.w3.org/2000/svg">`;
      
      // Générer les modules du QR code
      for (let row = 0; row < pattern.length; row++) {
        for (let col = 0; col < pattern[row].length; col++) {
          if (pattern[row][col] === '1') {
            const x = col * moduleSize;
            const y = row * moduleSize;
            svg += `<rect x="${x}" y="${y}" width="${moduleSize}" height="${moduleSize}" fill="${color}" />`;
          }
        }
      }
      
      svg += '</svg>';
      return svg;
    }

    // Fonction pour mettre à jour la prévisualisation du QR code
    function updateQRPreview() {
      const qrColor = qrColorInput?.value || '#000000';
      const isTransparent = transparentBgInput?.checked || false;
      const bgColor = isTransparent ? 'transparent' : (bgColorInput?.value || '#FFFFFF');
      
      const previewContainer = document.getElementById('preview-qr-container');
      const previewQRCode = document.getElementById('preview-qr-code');
      const previewColorInfo = document.getElementById('preview-color-info');
      const previewBgInfo = document.getElementById('preview-bg-info');
      
      if (previewContainer && previewQRCode && previewColorInfo && previewBgInfo) {
        // Mettre à jour le fond du container
        if (isTransparent) {
          // Motif damier pour fond transparent
          previewContainer.style.backgroundColor = 'transparent';
          previewContainer.style.backgroundImage = 'linear-gradient(45deg, #f0f0f0 25%, transparent 25%), linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f0f0f0 75%), linear-gradient(-45deg, transparent 75%, #f0f0f0 75%)';
          previewContainer.style.backgroundSize = '12px 12px';
          previewContainer.style.backgroundPosition = '0 0, 0 6px, 6px -6px, -6px 0px';
          previewBgInfo.textContent = 'Transparent';
        } else {
          previewContainer.style.backgroundColor = bgColor;
          previewContainer.style.backgroundImage = 'none';
          previewBgInfo.textContent = bgColor;
        }
        
        // Générer et afficher le QR code factice
        const fakeQRSvg = generateFakeQRCode(qrColor);
        previewQRCode.innerHTML = fakeQRSvg;
        
        // Mettre à jour les informations de couleur
        previewColorInfo.textContent = qrColor;
        
        // Animation de mise à jour
        animateElement(previewQRCode, [
          { transform: 'scale(0.95)', opacity: 0.7 },
          { transform: 'scale(1)', opacity: 1 }
        ], {
          duration: 200
        });
      }
    }

    // Fonction pour mettre à jour l'aperçu des couleurs
    function updateColorPreview() {
      const qrColor = qrColorInput?.value || '#000000';
      const bgColor = transparentBgInput?.checked ? 'transparent' : (bgColorInput?.value || '#FFFFFF');
      
      if (colorPreview) {
        colorPreview.style.backgroundColor = bgColor === 'transparent' ? 'rgba(0,0,0,0)' : bgColor;
        colorPreview.style.color = qrColor;
        
        if (bgColor === 'transparent') {
          // Motif damier pour fond transparent
          colorPreview.style.backgroundImage = 'linear-gradient(45deg, #ccc 25%, transparent 25%), linear-gradient(-45deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%), linear-gradient(-45deg, transparent 75%, #ccc 75%)';
          colorPreview.style.backgroundSize = '8px 8px';
          colorPreview.style.backgroundPosition = '0 0, 0 4px, 4px -4px, -4px 0px';
          previewBgColor.textContent = 'Transparent';
        } else {
          colorPreview.style.backgroundImage = 'none';
          previewBgColor.textContent = bgColor;
        }
      }
      
      // Mettre à jour la prévisualisation du QR code
      updateQRPreview();
      
      // Mettre à jour l'affichage du QR code si il est visible
      updateQRCodeDisplay();
    }

    // Nouvelle fonction pour mettre à jour l'affichage du QR code avec gestion du contraste
    function updateQRCodeDisplay() {
      if (!qrContainer.classList.contains('hidden') && qrImage.src) {
        const qrColor = qrColorInput?.value || '#000000';
        const isTransparent = transparentBgInput?.checked || false;
        const qrImageContainer = qrImage.parentElement;
        
        if (qrImageContainer) {
          if (isTransparent) {
            // Pour fond transparent, ajouter un motif damier en arrière-plan du conteneur
            qrImageContainer.style.backgroundImage = 'linear-gradient(45deg, #f0f0f0 25%, transparent 25%), linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f0f0f0 75%), linear-gradient(-45deg, transparent 75%, #f0f0f0 75%)';
            qrImageContainer.style.backgroundSize = '12px 12px';
            qrImageContainer.style.backgroundPosition = '0 0, 0 6px, 6px -6px, -6px 0px';
            
            // Si le QR code est blanc ou très clair, ajouter un contour sombre
            const rgb = hexToRgb(qrColor);
            if (rgb && (rgb.r > 200 && rgb.g > 200 && rgb.b > 200)) {
              qrImage.style.filter = 'drop-shadow(0 0 1px rgba(0,0,0,0.8))';
            } else {
              qrImage.style.filter = 'none';
            }
          } else {
            // Fond normal, pas de motif damier
            qrImageContainer.style.backgroundImage = 'none';
            qrImage.style.filter = 'none';
          }
        }
      }
    }

    // Fonction utilitaire pour convertir hex en RGB
    function hexToRgb(hex: string): {r: number, g: number, b: number} | null {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      console.log('Formulaire soumis'); // Debug
      
      // Vérifier si l'utilisateur peut créer des QR codes
      if (!canCreateQR) {
        alert('Vous avez atteint votre limite de QR codes pour ce mois-ci.');
        return;
      }

      // Afficher la confirmation avant génération
      const shouldProceed = await showGenerationConfirmation();
      if (!shouldProceed) {
        console.log('Génération annulée par l\'utilisateur');
        return;
      }
      
      // Animation du bouton de soumission
      const submitBtn = form.querySelector('button[type="submit"]') as HTMLElement;
      animateElement(submitBtn, [
        { transform: 'scale(1)' },
        { transform: 'scale(0.95)' },
        { transform: 'scale(1)' }
      ], {
        duration: 200
      });
      
      const formData = new FormData(form);
      const iban = formData.get('iban') as string;
      const amount = formData.get('amount') as string;
      const communication = formData.get('communication') as string;
      const beneficiary = formData.get('beneficiary') as string;

      console.log('Données:', { iban, amount, communication, beneficiary }); // Debug

      // Validation des champs obligatoires
      if (!iban || !amount) {
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('Veuillez remplir tous les champs obligatoires (IBAN et montant)');
        return;
      }

      // Validation de l'IBAN belge
      const ibanClean = iban.replace(/\s/g, '');
      const belgianIbanRegex = /^BE[0-9]{14}$/;
      const belgianIbanWithSpacesRegex = /^BE[0-9]{2}\s[0-9]{4}\s[0-9]{4}\s[0-9]{4}$/;
      
      console.log('=== DEBUG VALIDATION IBAN ===');
      console.log('IBAN original:', iban);
      console.log('IBAN nettoyé:', ibanClean);
      console.log('Longueur IBAN original:', iban.length);
      console.log('Longueur IBAN nettoyé:', ibanClean.length);
      console.log('Test regex sans espaces:', belgianIbanRegex.test(ibanClean));
      console.log('Test regex avec espaces:', belgianIbanWithSpacesRegex.test(iban));
      console.log('Regex sans espaces:', belgianIbanRegex);
      console.log('Regex avec espaces:', belgianIbanWithSpacesRegex);
      
      if (!belgianIbanRegex.test(ibanClean) && !belgianIbanWithSpacesRegex.test(iban)) {
        console.log('❌ VALIDATION ÉCHOUÉE');
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('Veuillez entrer un IBAN belge valide (format: BE68 5390 0754 7034)');
        return;
      }
      
      console.log('✅ VALIDATION IBAN RÉUSSIE');

      // Validation du montant
      const amountNum = parseFloat(amount);
      if (isNaN(amountNum) || amountNum <= 0 || amountNum > 999999.99) {
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('Le montant doit être compris entre 0.01€ et 999,999.99€');
        return;
      }

      // Validation de la communication (optionnelle)
      if (communication && (communication.length < 3 || communication.length > 140)) {
        animateElement(form, [
          { transform: 'translateX(0)' },
          { transform: 'translateX(-10px)' },
          { transform: 'translateX(10px)' },
          { transform: 'translateX(0)' }
        ], {
          duration: 400
        });
        alert('La communication doit contenir entre 3 et 140 caractères si elle est renseignée');
        return;
      }

      try {
        // Création de la chaîne de données pour le QR code (format EPC)
        const qrData = `BCD
002
1
SCT

${beneficiary || ''}
${ibanClean}
EUR${amount}


${communication || ''}`;

        console.log('QR Data:', qrData); // Debug

        // Génération du QR code via API
        const qrCodeUrl = await generateQRCodeWithColors(qrData, 300);
        
        // Animation de disparition de la prévisualisation
        const qrPreview = document.getElementById('qr-preview');
        if (qrPreview) {
          animateElement(qrPreview, [
            { opacity: 1, transform: 'scale(1)' },
            { opacity: 0, transform: 'scale(0.8)' }
          ], {
            duration: 300,
            complete: () => {
              qrPreview.classList.add('hidden');
              qrContainer.classList.remove('hidden');
              
              // Animation d'apparition du QR container
              animateElement(qrContainer, [
                { opacity: 0, transform: 'scale(0.8)' },
                { opacity: 1, transform: 'scale(1)' }
              ], {
                duration: 500,
                easing: 'ease-out'
              });
            }
          });
        }
        
        // Affichage du QR code
        qrImage.src = qrCodeUrl;
        qrImage.onload = () => {
          console.log('QR Code chargé avec couleurs personnalisées'); // Debug
          
          // Mettre à jour l'affichage avec le motif damier si nécessaire
          updateQRCodeDisplay();
          
          // Animation du QR code
          setTimeout(() => {
            animateElement('.animate-zoom-in', [
              { transform: 'scale(0)' },
              { transform: 'scale(1.1)' },
              { transform: 'scale(1)' }
            ], {
              duration: 600,
              easing: 'ease-out'
            });
          }, 100);
          
          // Animation des détails
          setTimeout(() => {
            animateElement('.animate-slide-up', [
              { opacity: 0, transform: 'translateY(30px)' },
              { opacity: 1, transform: 'translateY(0px)' }
            ], {
              duration: 400,
              easing: 'ease-out'
            });
          }, 400);
        };
        
        // Mise à jour des détails affichés
        displayIban.textContent = iban;
        displayAmount.textContent = amount;
        
        if (communication) {
          displayCommunication.textContent = communication;
          displayCommunicationContainer.classList.remove('hidden');
        } else {
          displayCommunicationContainer.classList.add('hidden');
        }
        
        if (beneficiary) {
          displayBeneficiary.textContent = beneficiary;
          displayBeneficiaryContainer.classList.remove('hidden');
        } else {
          displayBeneficiaryContainer.classList.add('hidden');
        }

        // Ajouter à l'historique
        addToHistory(iban, amount, communication, beneficiary);

        // Incrémenter le compteur d'utilisation dans la base de données
        await incrementQRUsage();

        // Sauvegarder le QR code dans la base de données
        try {
          const isTransparent = transparentBgInput?.checked || false;
          const response = await fetch('/api/save-qr-code', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              iban: ibanClean,
              amount,
              communication: communication || null,
              beneficiary: beneficiary || null,
              qrData: qrData,
              customColors: {
                bg_color: isTransparent ? '#FFFFFF' : bgColorInput.value || '#FFFFFF',
                qr_color: qrColorInput.value || '#000000',
                transparent: isTransparent
              }
            }),
          });

          const result = await response.json();
          if (result.success) {
            console.log('QR code sauvegardé dans la base de données:', result.qrCodeId);
            // Stocker l'ID du QR code pour le téléchargement
            if (qrContainer) {
              qrContainer.setAttribute('data-qr-id', result.qrCodeId);
              
              // Créer l'URL de partage pour ce QR code
              const shareBaseUrl = `${window.location.origin}/share/${result.qrCodeId}`;
              qrContainer.setAttribute('data-share-url', shareBaseUrl);
            }
          } else {
            console.error('Erreur lors de la sauvegarde du QR code:', result.message);
          }
        } catch (saveError) {
          console.error('Erreur lors de la sauvegarde du QR code:', saveError);
        }

        // Mettre à jour le header avec les nouvelles statistiques
        if (typeof (window as any).updateHeaderStats === 'function') {
          try {
            // Récupérer les nouvelles statistiques
            const response = await fetch('/api/get-user-stats', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ userId: (window as any).currentUserId }),
            });

            if (response.ok) {
              const result = await response.json();
              if (result.success && result.data) {
                (window as any).updateHeaderStats(result.data);
                console.log('✅ Header mis à jour après génération QR');
              }
            }
          } catch (error) {
            console.error('❌ Erreur lors de la mise à jour du header:', error);
          }
        }

      } catch (error) {
        console.error('Erreur lors de la génération du QR code:', error);
        alert('Erreur lors de la génération du QR code');
      }
    });

    // Fonction de téléchargement avec animation
    downloadBtn.addEventListener('click', async () => {
      try {
        // Animation du bouton
        animateElement(downloadBtn, [
          { transform: 'scale(1)' },
          { transform: 'scale(0.95)' },
          { transform: 'scale(1)' }
        ], {
          duration: 200
        });
        
        // Récupérer les données du formulaire
        const formData = new FormData(form);
        const iban = formData.get('iban') as string;
        const amount = formData.get('amount') as string;
        const communication = formData.get('communication') as string;
        const beneficiary = formData.get('beneficiary') as string;
        
        if (iban && amount) {
          const ibanClean = iban.replace(/\s/g, '');
          const qrData = `BCD
002
1
SCT

${beneficiary || ''}
${ibanClean}
EUR${amount}


${communication || ''}`;

          console.log('Début du téléchargement...');
          
          // Générer le QR code avec les couleurs personnalisées pour le téléchargement
          const customQrCodeUrl = await generateQRCodeWithColors(qrData, 300);
          
          console.log('QR Code généré pour téléchargement:', customQrCodeUrl);
          
          // Créer un nom de fichier descriptif
          const isTransparent = transparentBgInput?.checked || false;
          const qrColor = (qrColorInput?.value || '#000000').replace('#', '');
          const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
          const filename = `qr-payment-${amount}EUR-${isTransparent ? 'transparent' : 'colored'}-${timestamp}.png`;
          
          // Télécharger le fichier
          if (customQrCodeUrl.startsWith('data:')) {
            // Si c'est une data URL (cas transparent), téléchargement direct
            const link = document.createElement('a');
            link.href = customQrCodeUrl;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // Incrémenter le compteur de téléchargements dans la base de données
            const qrCodeId = qrContainer.getAttribute('data-qr-id');
            if (qrCodeId) {
              try {
                await fetch('/api/increment-download-count', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({ qrCodeId }),
                });
              } catch (error) {
                console.error('Erreur lors de l\'incrémentation du compteur:', error);
              }
            }
          } else {
            // Autrement (URL externe), utiliser fetch puis blob
            fetch(customQrCodeUrl)
              .then(response => response.blob())
              .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = filename;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                window.URL.revokeObjectURL(url);
                
                // Incrémenter le compteur de téléchargements dans la base de données
                const qrCodeId = qrContainer.getAttribute('data-qr-id');
                if (qrCodeId) {
                  fetch('/api/increment-download-count', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ qrCodeId }),
                  }).catch(error => {
                    console.error('Erreur lors de l\'incrémentation du compteur:', error);
                  });
                }
              })
              .catch(error => {
                console.error('Erreur lors du téléchargement:', error);
                alert('Erreur lors du téléchargement du QR code');
              });
          }
        }
      } catch (error) {
        console.error('Erreur lors du téléchargement:', error);
        alert('Erreur lors du téléchargement du QR code');
      }
    });

    // Formatage automatique de l'IBAN avec animation
    const ibanInput = document.getElementById('iban') as HTMLInputElement;
    ibanInput?.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      let value = target.value.replace(/\s/g, '').toUpperCase();
      
      console.log('=== DEBUG FORMATAGE IBAN ===');
      console.log('Valeur avant formatage:', target.value);
      console.log('Valeur nettoyée:', value);
      
      // Limiter à BE + 14 chiffres
      if (value.length > 16) {
        value = value.substring(0, 16);
        console.log('Valeur tronquée:', value);
      }
      
      // Forcer le préfixe BE si pas présent
      if (value.length > 0 && !value.startsWith('BE')) {
        if (value.startsWith('B')) {
          value = 'BE' + value.substring(1);
        } else {
          value = 'BE' + value;
        }
        console.log('Préfixe BE ajouté:', value);
      }
      
      // Formatage IBAN belge : BE12 3432 3423 2442
      let formatted = '';
      
      if (value.length >= 2) {
        formatted = value.substring(0, 2); // BE
        console.log('Étape 1 - BE:', formatted);
        
        if (value.length > 2) {
          formatted += value.substring(2, 4); // BE12
          console.log('Étape 2 - BE12:', formatted);
          
          if (value.length > 4) {
            formatted += ' ' + value.substring(4, 8); // BE12 3432
            console.log('Étape 3 - BE12 3432:', formatted);
            
            if (value.length > 8) {
              formatted += ' ' + value.substring(8, 12); // BE12 3432 3423
              console.log('Étape 4 - BE12 3432 3423:', formatted);
              
              if (value.length > 12) {
                formatted += ' ' + value.substring(12, 16); // BE12 3432 3423 2442
                console.log('Étape 5 - BE12 3432 3423 2442:', formatted);
              }
            }
          }
        }
      }
      
      console.log('Valeur finale formatée:', formatted);
      target.value = formatted;
      
      // Animation subtile lors de la saisie
      animateElement(target, [
        { borderColor: 'rgb(107, 114, 128)' },
        { borderColor: 'rgb(139, 92, 246)' },
        { borderColor: 'rgb(107, 114, 128)' }
      ], {
        duration: 300
      });
    });

    // Animations au focus des inputs
    const inputs = document.querySelectorAll('input, textarea');
    inputs.forEach(input => {
      input.addEventListener('focus', () => {
        if (input.parentElement) {
          animateElement(input.parentElement, [
            { transform: 'scale(1)' },
            { transform: 'scale(1.02)' },
            { transform: 'scale(1)' }
          ], {
            duration: 200
          });
        }
      });
    });

    // Écouteurs d'événements pour les boutons
    resetBtn?.addEventListener('click', resetForm);
    saveDefaultsBtn?.addEventListener('click', saveDefaults);

    // Fonction pour créer un QR code avec fond transparent en traitant l'image
    async function createTransparentQRCode(imageUrl: string, qrColor: string): Promise<string> {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = 'anonymous';
        
        img.onload = () => {
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          
          if (!ctx) {
            reject('Impossible de créer le contexte canvas');
            return;
          }
          
          canvas.width = img.width;
          canvas.height = img.height;
          
          // Dessiner l'image sur le canvas
          ctx.drawImage(img, 0, 0);
          
          // Obtenir les données de l'image
          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
          const data = imageData.data;
          
          // Convertir la couleur hex en RGB
          const targetColor = hexToRgb(qrColor);
          if (!targetColor) {
            reject('Couleur invalide');
            return;
          }
          
          // Traiter chaque pixel
          for (let i = 0; i < data.length; i += 4) {
            const r = data[i];
            const g = data[i + 1];
            const b = data[i + 2];
            
            // Si le pixel est blanc ou très clair (fond), le rendre transparent
            if (r > 240 && g > 240 && b > 240) {
              data[i + 3] = 0; // Alpha = 0 (transparent)
            } else if (r < 50 && g < 50 && b < 50) {
              // Si le pixel est noir (QR code), le remplacer par la couleur choisie
              data[i] = targetColor.r;     // Rouge
              data[i + 1] = targetColor.g; // Vert
              data[i + 2] = targetColor.b; // Bleu
              data[i + 3] = 255;           // Alpha = 255 (opaque)
            }
          }
          
          // Remettre les données modifiées sur le canvas
          ctx.putImageData(imageData, 0, 0);
          
          // Convertir en URL de données
          const transparentDataUrl = canvas.toDataURL('image/png');
          resolve(transparentDataUrl);
        };
        
        img.onerror = () => {
          reject('Erreur lors du chargement de l\'image');
        };
        
        img.src = imageUrl;
      });
    }

    // Fonction pour générer le QR code avec couleurs personnalisées (pour téléchargement)
    async function generateQRCodeWithColors(text: string, size: number = 300): Promise<string> {
      const qrColor = (qrColorInput?.value || '#000000').replace('#', '');
      const isTransparent = transparentBgInput?.checked || false;
      const bgColor = isTransparent ? '' : (bgColorInput?.value || '#FFFFFF').replace('#', '');
      const selectedSize = qrSizeSelect?.value || size.toString();
      const errorCorrection = errorCorrectionSelect?.value || 'M';
      const exportFormat = exportFormatSelect?.value || 'png';
      const qrStyle = qrStyleSelect?.value || 'square';
      const encodedText = encodeURIComponent(text);
      
      console.log('Génération QR Code avec:', { 
        qrColor, 
        isTransparent, 
        bgColor, 
        size: selectedSize, 
        errorCorrection, 
        format: exportFormat,
        style: qrStyle
      });
      
      // Note: L'API QR Server ne supporte pas tous les styles personnalisés
      // mais nous utilisons les paramètres disponibles (taille, couleur, format, correction)
      
      if (isTransparent) {
        // Pour le fond transparent, générer d'abord avec fond blanc puis traiter
        const baseUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${selectedSize}x${selectedSize}&data=${encodedText}&format=png&margin=10&color=000000&bgcolor=FFFFFF&ecc=${errorCorrection}`;
        console.log('URL de base pour transparence:', baseUrl);
        
        try {
          const transparentUrl = await createTransparentQRCode(baseUrl, '#' + qrColor);
          console.log('QR Code transparent créé avec succès');
          return transparentUrl;
        } catch (error) {
          console.error('Erreur lors de la création de la transparence:', error);
          // Fallback : retourner l'URL de base avec les couleurs demandées
          const fallbackUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${selectedSize}x${selectedSize}&data=${encodedText}&format=${exportFormat}&margin=10&color=${qrColor}&bgcolor=${bgColor || 'FFFFFF'}&ecc=${errorCorrection}`;
          return fallbackUrl;
        }
      } else {
        // Fond coloré normal
        const url = `https://api.qrserver.com/v1/create-qr-code/?size=${selectedSize}x${selectedSize}&data=${encodedText}&format=${exportFormat}&margin=10&color=${qrColor}&bgcolor=${bgColor}&ecc=${errorCorrection}`;
        console.log('URL QR Code avec fond coloré:', url);
        return url;
      }
    }

    // Fonction pour configurer les onglets
    function setupTabs() {
      const tabButtons = document.querySelectorAll('.tab-button');
      const tabContents = document.querySelectorAll('.tab-content');
      
      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          const targetTab = button.id.replace('tab-', 'content-');
          
          // Désactiver tous les onglets
          tabButtons.forEach(btn => {
            btn.classList.remove('active');
            btn.classList.add('text-gray-400', 'hover:text-white');
            btn.classList.remove('bg-gradient-to-r', 'from-purple-600', 'to-pink-600', 'text-white', 'shadow-lg');
          });
          
          tabContents.forEach(content => {
            content.classList.remove('active');
            content.classList.add('hidden');
          });
          
          // Activer l'onglet sélectionné
          button.classList.add('active');
          button.classList.remove('text-gray-400', 'hover:text-white');
          button.classList.add('bg-gradient-to-r', 'from-purple-600', 'to-pink-600', 'text-white', 'shadow-lg');
          
          const targetContent = document.getElementById(targetTab);
          if (targetContent) {
            targetContent.classList.add('active');
            targetContent.classList.remove('hidden');
            
            // Animation d'apparition
            animateElement(targetContent, [
              { opacity: 0, transform: 'translateY(10px)' },
              { opacity: 1, transform: 'translateY(0px)' }
            ], {
              duration: 300,
              easing: 'ease-out'
            });
          }
          
          console.log('Onglet activé:', targetTab);
        });
      });
    }

    // Configuration des boutons de partage social
    function setupShareButtons() {
      // Vérifier si l'API Web Share est disponible
      const isWebShareSupported = navigator.share !== undefined;
      const shareNativeBtn = document.getElementById('share-native');
      
      if (isWebShareSupported && shareNativeBtn) {
        shareNativeBtn.classList.remove('hidden');
      }
      
      // Récupérer tous les boutons de partage
      const shareButtons = document.querySelectorAll('.share-btn');
      const shareFeedback = document.getElementById('share-feedback');
      
      // Fonction pour obtenir l'URL de partage permanente
      function getShareUrl() {
        // Vérifier si le QR code a une URL de partage
        const qrContainer = document.getElementById('qr-container');
        const shareUrl = qrContainer?.getAttribute('data-share-url');
        
        // Retourner l'URL de partage si elle existe, sinon l'URL actuelle
        return shareUrl || window.location.href;
      }
      
      // Fonction pour créer une URL temporaire pour le partage de l'image
      async function getShareableImageUrl() {
        try {
          // Utiliser l'URL du QR code affiché
          const qrImage = document.getElementById('qr-image') as HTMLImageElement;
          
          if (!qrImage || !qrImage.src) {
            throw new Error('QR code non disponible');
          }
          
          // Si l'URL est déjà une URL externe, on peut l'utiliser directement
          if (qrImage.src.startsWith('http') && !qrImage.src.startsWith('data:')) {
            return qrImage.src;
          }
          
          // Pour les data URLs, on doit créer un blob
          if (qrImage.src.startsWith('data:')) {
            const response = await fetch(qrImage.src);
            const blob = await response.blob();
            return URL.createObjectURL(blob);
          }
          
          // URL relative
          return qrImage.src;
        } catch (error) {
          console.error('Erreur lors de la création de l\'URL partageable:', error);
          return null;
        }
      }
      
      // Fonction pour obtenir le texte de partage
      function getShareText() {
        const iban = document.getElementById('display-iban')?.textContent || '';
        const amount = document.getElementById('display-amount')?.textContent || '';
        const shareUrl = getShareUrl();
        
        return `Paiement de ${amount}€ à l'IBAN ${iban}. Scannez le QR code sur: ${shareUrl}`;
      }
      
      // Configuration du partage natif
      shareNativeBtn?.addEventListener('click', async () => {
        try {
          const imageUrl = await getShareableImageUrl();
          const shareText = getShareText();
          
          // Vérifier si le partage de fichiers est supporté
          const supportsFileSharing = 'canShare' in navigator && 
                                     navigator.canShare && 
                                     navigator.canShare({ files: [new File(['test'], 'test.txt', { type: 'text/plain' })] });
          
          if (supportsFileSharing && imageUrl) {
            try {
              // Créer un fichier pour le partage
              const response = await fetch(imageUrl);
              const blob = await response.blob();
              const file = new File([blob], 'qr-code-paiement.png', { type: 'image/png' });
              
              // Vérifier si on peut partager ce fichier spécifique
              const canShareFile = navigator.canShare({ files: [file] });
              
              if (canShareFile) {
                // Partager via l'API Web Share avec le fichier
                await navigator.share({
                  title: 'QR Code de paiement Wipay',
                  text: shareText,
                  files: [file]
                });
                
                console.log('Partage réussi via Web Share API avec image');
                return; // Sortir de la fonction si le partage a réussi
              }
            } catch (fileError) {
              console.warn('Erreur lors du partage avec fichier, tentative avec URL seulement:', fileError);
              // Continuer vers le fallback
            }
          }
          
          // Fallback: partage sans fichier, juste avec URL
          await navigator.share({
            title: 'QR Code de paiement Wipay',
            text: `${shareText}\n\nScannez le QR code sur:`,
            url: window.location.href
          });
          
          console.log('Partage réussi via Web Share API avec URL');
          
        } catch (error) {
          console.error('Erreur lors du partage:', error);
          
          if ((error as any).name === 'AbortError') {
            // L'utilisateur a annulé le partage, pas besoin d'afficher une erreur
            console.log('Partage annulé par l\'utilisateur');
          } else {
            // Une vraie erreur s'est produite
            alert('Erreur lors du partage. Veuillez essayer une autre méthode de partage.');
          }
        }
      });
      
      // Configuration de WhatsApp
      document.getElementById('share-whatsapp')?.addEventListener('click', async () => {
        try {
          const shareText = getShareText();
          // Utiliser l'URL de partage permanente au lieu de l'URL actuelle
          const shareUrl = getShareUrl();
          // WhatsApp ne permet pas de partager directement des images
          const encodedText = encodeURIComponent(shareText);
          const whatsappUrl = `https://wa.me/?text=${encodedText}`;
          window.open(whatsappUrl, '_blank');
        } catch (error) {
          console.error('Erreur lors du partage sur WhatsApp:', error);
          
          // Fallback très simple
          const shareUrl = getShareUrl();
          const fallbackUrl = `https://wa.me/?text=${encodeURIComponent(shareUrl)}`;
          window.open(fallbackUrl, '_blank');
        }
      });
      
      // Configuration de Messenger
      document.getElementById('share-messenger')?.addEventListener('click', async () => {
        try {
          const shareText = getShareText();
          const shareUrl = getShareUrl();
          
          // Utiliser l'URL de partage permanente dans le partage Facebook
          const fbShareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareText)}`;
          window.open(fbShareUrl, '_blank');
        } catch (error) {
          console.error('Erreur lors du partage sur Facebook/Messenger:', error);
          
          // Fallback simple
          const shareUrl = getShareUrl();
          const fbShareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`;
          window.open(fbShareUrl, '_blank');
        }
      });
      
      // Configuration de Telegram
      document.getElementById('share-telegram')?.addEventListener('click', async () => {
        try {
          const shareText = getShareText().split('. Scannez')[0]; // Ne pas inclure l'URL dans le texte car Telegram la met déjà
          const shareUrl = getShareUrl();
          
          // Telegram permet de partager une URL avec un texte descriptif
          const telegramUrl = `https://t.me/share/url?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(shareText)}`;
          window.open(telegramUrl, '_blank');
        } catch (error) {
          console.error('Erreur lors du partage sur Telegram:', error);
          
          // Fallback simple avec juste l'URL
          const shareUrl = getShareUrl();
          const fallbackUrl = `https://t.me/share/url?url=${encodeURIComponent(shareUrl)}`;
          window.open(fallbackUrl, '_blank');
        }
      });
      
      // Configuration de l'email
      document.getElementById('share-email')?.addEventListener('click', () => {
        const subject = encodeURIComponent('QR Code de paiement Wipay');
        const body = encodeURIComponent(`${getShareText()}\n\nGénéré sur ${window.location.href}`);
        window.location.href = `mailto:?subject=${subject}&body=${body}`;
      });
      
      // Configuration de la copie du lien
      document.getElementById('share-copy')?.addEventListener('click', () => {
        try {
          // Utiliser l'URL de partage permanente
          const shareUrl = getShareUrl();
          navigator.clipboard.writeText(shareUrl);
          
          // Afficher le feedback
          if (shareFeedback) {
            shareFeedback.classList.remove('hidden');
            
            // Animer l'apparition
            animateElement(shareFeedback, [
              { opacity: 0, transform: 'translateY(-10px)' },
              { opacity: 1, transform: 'translateY(0)' }
            ], {
              duration: 300
            });
            
            // Masquer après 3 secondes
            setTimeout(() => {
              animateElement(shareFeedback, [
                { opacity: 1, transform: 'translateY(0)' },
                { opacity: 0, transform: 'translateY(-10px)' }
              ], {
                duration: 300,
                complete: () => {
                  shareFeedback.classList.add('hidden');
                }
              });
            }, 3000);
          }
        } catch (error) {
          console.error('Erreur lors de la copie du lien:', error);
          alert('Erreur lors de la copie du lien. Veuillez réessayer.');
        }
      });

      // Configuration de LinkedIn
      document.getElementById('share-linkedin')?.addEventListener('click', () => {
        try {
          // Utiliser l'URL de partage permanente
          const shareUrl = getShareUrl();
          const linkedinUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}`;
          window.open(linkedinUrl, '_blank');
        } catch (error) {
          console.error('Erreur lors du partage sur LinkedIn:', error);
          window.open('https://www.linkedin.com/sharing/share-offsite/', '_blank');
        }
      });
    }

    // Charger les valeurs par défaut au démarrage
    loadDefaults();
    setupColorHandlers();
    setupAdvancedFeatures();
    // setupCreativeHandlers(); // Désactivé temporairement
    setupTabs();
    loadHistory();
    setupShareButtons();
    
    // Initialiser la prévisualisation du QR code
    updateQRPreview();
  });
</script>

<style>
  /* Animations CSS personnalisées */
  @keyframes float {
    0%, 100% { 
      transform: translateY(0px);
    }
    50% { 
      transform: translateY(-15px);
    }
  }
  
  @keyframes glow {
    0%, 100% { 
      box-shadow: 0 0 30px rgba(139, 92, 246, 0.2);
    }
    50% { 
      box-shadow: 0 0 50px rgba(139, 92, 246, 0.4);
    }
  }
  
  @keyframes pulse-glow {
    0%, 100% {
      box-shadow: 0 0 20px rgba(139, 92, 246, 0.3);
    }
    50% {
      box-shadow: 0 0 40px rgba(139, 92, 246, 0.6);
    }
  }
  
  @keyframes gradient-shift {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
  
  .float-animation {
    animation: float 4s ease-in-out infinite;
  }
  
  .glow-animation {
    animation: glow 3s ease-in-out infinite;
  }
  
  .pulse-glow {
    animation: pulse-glow 2s ease-in-out infinite;
  }
  
  .gradient-animation {
    background-size: 200% 200%;
    animation: gradient-shift 3s ease infinite;
  }
  
  /* Effets de hover améliorés */
  .group:hover .group-hover\:border-purple-400 {
    border-color: rgb(196, 181, 253);
  }
  
  /* Transitions fluides */
  * {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Effets de glassmorphism */
  .backdrop-blur-xl {
    backdrop-filter: blur(20px);
  }
  
  /* Scrollbar personnalisée */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: rgba(55, 65, 81, 0.3);
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb {
    background: linear-gradient(to bottom, rgb(139, 92, 246), rgb(219, 39, 119));
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(to bottom, rgb(124, 58, 237), rgb(190, 24, 93));
  }
  
  /* Enlever les flèches des inputs number */
  .no-arrows::-webkit-outer-spin-button,
  .no-arrows::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  .no-arrows[type=number] {
    -moz-appearance: textfield;
  }
  
  /* Amélioration des validations visuelles */
  input:invalid {
    border-color: rgb(239, 68, 68) !important;
  }
  
  input:valid {
    border-color: rgb(34, 197, 94);
  }
  
  textarea:invalid {
    border-color: rgb(239, 68, 68) !important;
  }
  
  textarea:valid {
    border-color: rgb(34, 197, 94);
  }
  
  /* Animation pour les champs requis */
  input:required:focus,
  textarea:required:focus {
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }

  /* Améliorations pour l'accessibilité */
  button:focus-visible,
  input:focus-visible,
  textarea:focus-visible {
    outline: 2px solid rgb(139, 92, 246);
    outline-offset: 2px;
  }

  /* Responsive pour les textes longs */
  .break-words {
    word-wrap: break-word;
    word-break: break-word;
    hyphens: auto;
  }

  /* Amélioration des boutons sur mobile */
  @media (max-width: 640px) {
    button {
      min-height: 44px; /* Taille minimum recommandée pour le touch */
    }
    
    input[type="color"] {
      min-width: 44px;
      min-height: 44px;
    }
  }

  /* Animation pour les états de chargement */
  .loading {
    opacity: 0.7;
    pointer-events: none;
  }

  /* Amélioration du contraste pour l'accessibilité */
  .text-gray-400 {
    color: rgb(156, 163, 175);
  }

  .text-gray-300 {
    color: rgb(209, 213, 219);
  }

  /* Responsive pour les grilles */
  @media (max-width: 1279px) {
    .xl\:grid-cols-2 {
      grid-template-columns: 1fr;
    }
  }

  /* Amélioration des espacements sur mobile */
  @media (max-width: 640px) {
    .space-y-6 > * + * {
      margin-top: 1rem;
    }
    
    .gap-3 {
      gap: 0.5rem;
    }
  }

  /* Styles pour les onglets */
  .tab-button {
    background: rgba(55, 65, 81, 0.5);
    color: rgb(156, 163, 175);
    border: 1px solid rgba(75, 85, 99, 0.5);
  }

  .tab-button:hover {
    color: white;
    background: rgba(75, 85, 99, 0.7);
  }

  .tab-button.active {
    background: linear-gradient(to right, rgb(147, 51, 234), rgb(219, 39, 119));
    color: white;
    border: 1px solid rgba(147, 51, 234, 0.5);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  .tab-content {
    opacity: 1;
    transform: translateY(0);
    transition: all 0.3s ease-out;
  }

  .tab-content.hidden {
    display: none;
  }

  /* Styles pour les selects personnalisés */
  .custom-select-wrapper {
    position: relative;
  }

  .custom-select {
    background-image: none;
    padding-right: 3rem;
  }

  .custom-select:focus {
    outline: none;
  }

  .custom-select-arrow {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    transition: transform 0.2s ease;
  }

  .custom-select:focus + .custom-select-arrow {
    transform: translateY(-50%) rotate(180deg);
  }

  .custom-select option {
    background: rgb(55, 65, 81);
    color: white;
    padding: 0.5rem;
  }

  .custom-select option:hover {
    background: rgb(75, 85, 99);
  }

  /* Scrollbar personnalisée pour l'historique */
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: rgba(139, 92, 246, 0.5) rgba(55, 65, 81, 0.3);
  }

  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: rgba(55, 65, 81, 0.3);
    border-radius: 3px;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(139, 92, 246, 0.5);
    border-radius: 3px;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgba(139, 92, 246, 0.7);
  }

  /* Animation pour les éléments de l'historique */
  .history-item {
    transition: all 0.2s ease;
  }

  .history-item:hover {
    transform: translateX(4px);
    background: rgba(75, 85, 99, 0.5) !important;
  }

  /* Responsive pour les onglets */
  @media (max-width: 640px) {
    .tab-button {
      font-size: 0.75rem;
      padding: 0.5rem 0.75rem;
    }
    
    .tab-button span:not(.sm\\:hidden) {
      display: none;
    }
    
    .tab-button .sm\\:hidden {
      display: inline !important;
    }
  }

  /* Amélioration des focus states pour l'accessibilité */
  .tab-button:focus-visible {
    outline: 2px solid rgb(139, 92, 246);
    outline-offset: 2px;
  }

  .custom-select:focus-visible {
    outline: 2px solid rgb(139, 92, 246);
    outline-offset: 2px;
  }
</style> 